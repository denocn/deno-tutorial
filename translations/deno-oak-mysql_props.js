import Ga from '/_ga.js';
import projectConfig from '/pagic.config.js';
export default {
    'ga': React.createElement(Ga, { id: "UA-169223577-1" }),
    'sidebar': [
        {
            "text": "Deno 钻研之术",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "text": "基础篇",
            "children": [
                {
                    "text": "Hello，从多样化安装到简单实战",
                    "link": "articles/basic/install-and-hello-world.html",
                    "pagePath": "articles/basic/install-and-hello-world.md"
                }
            ]
        },
        {
            "text": "生态篇",
            "children": [
                {
                    "text": "Awesome Deno 中文资源全图谱",
                    "link": "articles/ecology/awesome-deno-cn.html",
                    "pagePath": "articles/ecology/awesome-deno-cn.md"
                }
            ]
        },
        {
            "text": "Node 篇",
            "children": [
                {
                    "text": "深入浅出 Create React App",
                    "link": "articles/node/create-react-app-intro.html",
                    "pagePath": "articles/node/create-react-app-intro.md"
                },
                {
                    "text": "欲取代绝大多 JavaScript 工具链？Rome 尝鲜",
                    "link": "articles/node/javascript-toolchain-rome.html",
                    "pagePath": "articles/node/javascript-toolchain-rome.md"
                }
            ]
        },
        {
            "text": "翻译篇",
            "children": [
                {
                    "text": "Deno 入门手册：附大量 TypeScript 代码实例",
                    "link": "translations/the-deno-handbook.html",
                    "pagePath": "translations/the-deno-handbook.md"
                },
                {
                    "text": "Deno + WebSockets 打造聊天室应用",
                    "link": "translations/deno-chat-app.html",
                    "pagePath": "translations/deno-chat-app.md"
                },
                {
                    "text": "从 Node 到 Deno：探索各大主流库替代方案",
                    "link": "translations/from-node-to-deno.html",
                    "pagePath": "translations/from-node-to-deno.md"
                },
                {
                    "text": "Deno + Oak 构建酷炫的 Todo API",
                    "link": "translations/deno-oak-todo-api.html",
                    "pagePath": "translations/deno-oak-todo-api.md"
                },
                {
                    "text": "Deno + Oak 连接 MySQL 实战教程",
                    "link": "translations/deno-oak-mysql.html",
                    "pagePath": "translations/deno-oak-mysql.md"
                }
            ]
        },
        {
            "text": "感谢",
            "link": "articles/THANKS.html",
            "pagePath": "articles/THANKS.md"
        }
    ],
    config: { "srcDir": "src", "publicDir": "public", "base": "/", ...projectConfig },
    'pagePath': "translations/deno-oak-mysql.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "translations/deno-oak-mysql.html",
    'title': "Deno + Oak 连接 MySQL 实战教程",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Deno + Oak 连接 MySQL 实战教程</h1>\n<blockquote>\n<ul>\n<li>原文地址：<a href="https://www.freecodecamp.org/news/how-to-use-mysql-in-deno-oak/">How to Use MySQL With Deno and Oak</a></li>\n<li>原文作者：Adeel Imran</li>\n<li>原文发布时间：2020-06-07</li>\n<li>译者：<a href="https://github.com/hylerrix">hylerrix</a></li>\n<li>备注：本文遵循 <a href="https://github.com/freeCodeCamp/news-translation">freeCodeCamp 翻译规范</a>，同时本文会收录在<a href="https://github.com/hylerrix/deno-tutorial">《Deno 钻研之术》</a>的翻译篇中。</li>\n<li>备注：《Deno 钻研之术》电子书官网上线啦！<a href="https://deno-tutorial.js.org">https://deno-tutorial.js.org</a></li>\n<li>备注：最近着手准备原创 JavaScript 模块化从零到 Deno 模块机制系列 &amp; 构思 Oak 开源应用中...</li>\n</ul>\n</blockquote>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/86548/1592877025767-bf6733e8-cd46-4f80-84e8-fa677389bf0c.jpeg#align=left&amp;display=inline&amp;height=1333&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1333&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>我最近写了一篇关于 <a href="https://www.freecodecamp.org/news/create-a-todo-api-in-deno-written-by-a-guy-coming-from-node/">Deno + Oak 构建酷炫 Todo API</a> 的文章 ，其中并没有使用数据库相关的知识点。您可以在我的 Github 仓库 <a href="https://github.com/adeelibr/deno-playground/tree/master/chapter_1:oak">adeelibr/deno-playground</a> 的 chapter_1:oak 中查看当时的整套代码。</p>\n<blockquote>\n<p>译者注：翻译版的<a href="https://deno-tutorial.js.org/translations/004-deno-oak-todo-api.html">《Deno + Oak 构建酷炫的 Todo API》</a>在这里，相关 Demo 也可以在电子书仓库中找到。</p>\n</blockquote>\n<p>本文将进一步讲起，一起来学习如何将 MySQL 集成到我们的 Deno + Oak 项目中。</p>\n<p>如果你想随时了解本文的完整代码，可以在 <a href="https://github.com/adeelibr/deno-playground/tree/master/chapter_2:mysql">chapter_2:mysql</a> 中找到，欢迎给仓库点个 Star。</p>\n<p>我将假设你已经阅读了上一篇文章，如果没有，可以先在<a href="https://www.freecodecamp.org/news/create-a-todo-api-in-deno-written-by-a-guy-coming-from-node/">此处</a>阅读完后再回到本文来。</p>\n<p>在我们开始前，请确保你已经安装了一个 MySQL 客户端并你能成功运行：</p>\n<ul>\n<li>MySQL community server [<a href="https://dev.mysql.com/downloads/mysql/">在这里下载</a>]</li>\n<li>MySQL Workbench [<a href="https://dev.mysql.com/downloads/workbench/">在这里下载</a>]</li>\n</ul>\n<p>同时我也为 MacOS 用户写了一个简短的，关于<a href="https://github.com/adeelibr/deno-playground/blob/master/guidelines/setting-up-mysql-mac-os-catalina.md">如何安装 MySQL 的教程</a>。</p>\n<p>如果你是在 Windows 环境下，你可以使用和上面相同的工具，或者直接使用 <a href="https://www.apachefriends.org/index.html">XAMPP</a> 来快速运行 MySQL 实例到你的机器上。</p>\n<p>当你将 MySQL 成功跑起来后，我们就可以开始本文的探索了。</p>\n<h2 id="%E8%AE%A9%E6%88%91%E4%BB%AC%E5%BC%80%E5%A7%8B%E5%90%A7">让我们开始吧<a class="anchor" href="#%E8%AE%A9%E6%88%91%E4%BB%AC%E5%BC%80%E5%A7%8B%E5%90%A7">§</a></h2>\n<p>假设你已经阅读了<a href="https://www.freecodecamp.org/news/create-a-todo-api-in-deno-written-by-a-guy-coming-from-node/">上一篇文章</a>，我们将编写如下功能：</p>\n<ul>\n<li>创建一个 MySQL 数据库的连接；</li>\n<li>编写一个小脚本，每当我们重启 Deno 服务器时数据库会自动重置；</li>\n<li>在一个数据表上执行 CRUD 操作；</li>\n<li>将 CURD 操作连接到我们的 API 控制器中。</li>\n</ul>\n<p>开始前的最后一件事：我将上一篇的代码添加 MySQL 版本后的具体 Git 变动可以<a href="https://github.com/adeelibr/deno-playground/pull/1/commits/5b63b51ebcadededcfec452fe6877a0bd0f1f83f">在这里</a>查阅。</p>\n<p>在你的项目根目录中（我的叫做 <em><code>chapter_2:mysql</code></em>，你的可以随便起），创建一个 <strong>db</strong> 文件夹，并在其中创建一个 <strong>config.ts</strong> 并添加如下内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">DATABASE</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"deno"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">TABLE</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">TODO</span><span class="token operator">:</span> <span class="token string">"todo"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这里没什么新知识点，仅仅导出了我们定义的数据库的名称以及一个 TABLE 对象。通过这个导出，我们的项目中将会有一个名为 “deno” 的数据库，其中又会有一个名为 “todo” 的数据表。</p>\n<p>接下来，在 <strong>db</strong> 文件夹中再创建一个名为 <strong>client.ts</strong> 的文件并填充如下内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token maybe-class-name">Client</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/mysql/mod.ts">https://deno.land/x/mysql/mod.ts</a>"</span><span class="token punctuation">;</span>\n<span class="token comment">// config</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">DATABASE</span><span class="token punctuation">,</span> <span class="token constant">TABLE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./config.ts"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">Client</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nclient<span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hostname<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>\n  password<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n  db<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这段代码包含了若干条功能。</p>\n<p>我们从 Deno 的一个第三方 <code>mysql</code> 模块中解构出了 <code>Client</code> 变量，这个变量可以用来连接数据库并执行指定的增删改查工作。</p>\n<pre class="language-typescript"><code class="language-typescript">client<span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hostname<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>\n  password<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n  db<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><code>Client</code> 内置一个 <code>connect</code> 方法，用来供我们设置 <code>hostname</code>、<code>username</code>、<code>password</code> 和 <code>db</code> 等字段的值，以设置与 MySQL 的连接配置。</p>\n<p>请确保你的 <code>username</code> 用户没有设置 <code>password</code>，因为目前的 Deno MySQL 模块无法连接有密码的用户。如果你不知道如何清空用户密码，可以阅读<a href="https://github.com/adeelibr/deno-playground/blob/master/guidelines/setting-up-mysql-mac-os-catalina.md#set-your-mysql-password-to-empty">这里</a>。</p>\n<p>我在此处将  <code>database</code> 字段留空，因为我想稍后在脚本中手动选择它。</p>\n<p>让我们添加一个用来初始化名为“deno”的数据库并为其创建一个名为“todo”表的脚本。</p>\n<p>在 <code>db/client.ts</code> 文件中我们添加以下内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token maybe-class-name">Client</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/mysql/mod.ts">https://deno.land/x/mysql/mod.ts</a>"</span><span class="token punctuation">;</span>\n<span class="token comment">// 加载配置文件里的配置</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">DATABASE</span><span class="token punctuation">,</span> <span class="token constant">TABLE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./config.ts"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">Client</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nclient<span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hostname<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>\n  password<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n  db<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建一个数据库 (前提是之前没有创建过)</span>\n  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token constant">CREATE</span> <span class="token constant">DATABASE</span> <span class="token constant">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> $<span class="token punctuation">{</span><span class="token constant">DATABASE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 选择我们的数据库</span>\n  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token constant">USE</span> $<span class="token punctuation">{</span><span class="token constant">DATABASE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 如果已经创建过名为 Todo 的数据表，将其删除</span>\n  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token constant">DROP</span> <span class="token constant">TABLE</span> <span class="token constant">IF</span> <span class="token constant">EXISTS</span> $<span class="token punctuation">{</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 创建 Todo 数据表</span>\n  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> $<span class="token punctuation">{</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token punctuation">}</span> <span class="token punctuation">(</span>\n        id <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n        todo <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>\n        isCompleted <span class="token builtin">boolean</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span><span class="token maybe-class-name">InnoDB</span> <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> client<span class="token punctuation">;</span>\n</code></pre>\n<p>这里我们从我们的最早的配置文件中导入了 <code>DATABASE</code> 和 <code>TABLE</code>，并通过  <code>run()</code> 方法创建相关的数据库和表。</p>\n<p>让我们截取 <code>run()</code> 方法相关的代码片段。我在代码中已经编写了帮助你理解的注释。</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建一个数据库 (前提是之前没有创建过)</span>\n  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token constant">CREATE</span> <span class="token constant">DATABASE</span> <span class="token constant">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> $<span class="token punctuation">{</span><span class="token constant">DATABASE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 选择我们的数据库</span>\n  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token constant">USE</span> $<span class="token punctuation">{</span><span class="token constant">DATABASE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 如果已经创建过名为 Todo 的数据表，将其删除</span>\n  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token constant">DROP</span> <span class="token constant">TABLE</span> <span class="token constant">IF</span> <span class="token constant">EXISTS</span> $<span class="token punctuation">{</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 创建 Todo 数据表</span>\n  <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> $<span class="token punctuation">{</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token punctuation">}</span> <span class="token punctuation">(</span>\n        id <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token constant">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n        todo <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>\n        isCompleted <span class="token builtin">boolean</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span><span class="token maybe-class-name">InnoDB</span> <span class="token constant">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<ul>\n<li>创建一个名为 <code>deno</code> 的数据库，如果之前已经有这个数据库则跳过此步骤。</li>\n<li>选择我们当前名为 <code>deno</code> 的这个数据库。</li>\n<li>在 <code>deno</code> 数据库中，如果名为 <code>todo</code> 的表存在，则将其删除。</li>\n<li>接下来，在 <code>deno</code> 数据库中创建一个新的 <code>todo</code> 表，并且定义其表结构：表结构将包含一个唯一的、自增长的、数值型的 <code>id</code> 字段；也将包含一个名为 <code>todo</code> 的字符串型字段；同时还包含一个名为  <code>isCompleted</code> 的布尔型字段；最后将 <code>id</code> 字段定义为主键。</li>\n</ul>\n<p>我写这段代码的原因是因为我不想在 MySQL 实例中有代码上无法直观看出来的信息。有了这段代码后，每次重启服务器时，它都会重新初始化所有内容。</p>\n<p>你可以不编写这段代码。但如果不编写的话，则必须手动创建数据库和表。</p>\n<p>同时，你也可以查阅 Deno MySQL 模块的 <a href="https://deno.land/x/mysql/#create-database">db creation</a> 和 <a href="https://deno.land/x/mysql/#create-table">table creation</a> 文档。</p>\n<p>回到文章的主旨，我们已经完成了上面提到的四个目标的两个目标：</p>\n<ul>\n<li>创建一个 MySQL 数据库的连接；</li>\n<li>编写一个小脚本，每当我们重启 Deno 服务器时数据库会自动重置。</li>\n</ul>\n<p>这意味着本文 50% 的知识点已经介绍完毕。但不幸运的是，现在还测试不了任何数据操作功能。一起来快速添加几个 CRUD 功能来看看具体是怎样执行的。</p>\n<h2 id="%E5%9C%A8%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B8%8A%E6%89%A7%E8%A1%8C-crud-%E6%93%8D%E4%BD%9C%E5%B9%B6%E5%B0%86%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%88%B0-api-%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD">在数据表上执行 CRUD 操作并将功能添加到 API 控制器中<a class="anchor" href="#%E5%9C%A8%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B8%8A%E6%89%A7%E8%A1%8C-crud-%E6%93%8D%E4%BD%9C%E5%B9%B6%E5%B0%86%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%88%B0-api-%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD">§</a></h2>\n<p>我们需要先编写 Todo 接口。创建 <code>interfaces/Todo.ts</code> 文件并添加如下内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token maybe-class-name">Todo</span></span> <span class="token punctuation">{</span>\n  id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  todo<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  isCompleted<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>代码中的 <code>?</code> 符号代表这个键是可选的。之所以这样做是因为接下来我们有的地方仅需要其中的若干个键。</p>\n<p>如果你想了解更多 TypeScript 中可选的属性，可以查阅<a href="https://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties">这里</a>。</p>\n<p>接下来，在根目录创建一个名为 <strong>models</strong> 的文件夹并在其中创建一个名为 <strong>todo.ts</strong> 的文件，添加如下内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> client <span class="token keyword">from</span> <span class="token string">"../db/client.ts"</span><span class="token punctuation">;</span>\n<span class="token comment">// 加载配置文件</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">TABLE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../db/config.ts"</span><span class="token punctuation">;</span>\n<span class="token comment">// 加载接口文件</span>\n<span class="token keyword">import</span> <span class="token maybe-class-name">Todo</span> <span class="token keyword">from</span> <span class="token string">"../interfaces/Todo.ts"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/**\n   * 通过解构的 id 参数值，来检查相应的 todo 元素是否存在于数据表中\n   * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n   * <span class="token keyword">@returns</span> 返回布尔值来代表是否存在\n   */</span>\n  <span class="token function-variable function">doesExistById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * 将会返回 todo 表中的所有内容\n   * <span class="token keyword">@returns</span> 返回全部都是 todo 元素的数组\n   */</span>\n  <span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * 过解构的 id 参数值，来返回相应的 todo 元素\n   * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n   * <span class="token keyword">@returns</span> 返回一个 todo 元素\n   */</span>\n  <span class="token function-variable function">getById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * 在 todo 表中增加一个新的 todo 元素\n   * <span class="token keyword">@param</span> <span class="token parameter">todo</span>\n   * <span class="token keyword">@param</span> <span class="token parameter">isCompleted</span>\n   */</span>\n  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> todo<span class="token punctuation">,</span> isCompleted <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * 修改某个 todo 元素的内容\n   * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n   * <span class="token keyword">@param</span> <span class="token parameter">todo</span>\n   * <span class="token keyword">@param</span> <span class="token parameter">isCompleted</span>\n   * <span class="token keyword">@returns</span> 返回一个数字 (代表影响的行数)\n   */</span>\n  <span class="token function-variable function">updateById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> todo<span class="token punctuation">,</span> isCompleted <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * 通过 ID 来删除指定的元素\n   * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n   * <span class="token keyword">@returns</span> integer (count of effect rows)\n   */</span>\n  <span class="token function-variable function">deleteById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>此时每个函数都是空的，不用担心，我们接下来会一一填充。</p>\n<p>接下来创建 <code>controllers/todo.ts</code> 文件并保证填充如下内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// 加载接口文件</span>\n<span class="token keyword">import</span> <span class="token maybe-class-name">Todo</span> <span class="token keyword">from</span> <span class="token string">"../interfaces/Todo.ts"</span><span class="token punctuation">;</span>\n<span class="token comment">// 加载模型操作文件</span>\n<span class="token keyword">import</span> <span class="token maybe-class-name">TodoModel</span> <span class="token keyword">from</span> <span class="token string">"../models/todo.ts"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@description</span> 获取所有 todo 元素\n   * <span class="token keyword">@route</span> GET /todos\n   */</span>\n  <span class="token function-variable function">getAllTodos</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> response<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@description</span> 新增一个 todo 元素\n   * <span class="token keyword">@route</span> POST /todos\n   */</span>\n  <span class="token function-variable function">createTodo</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> request<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> request<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> response<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@description</span> 通过 id 获取指定的 todo 元素\n   * <span class="token keyword">@route</span> GET todos/:id\n   */</span>\n  <span class="token function-variable function">getTodoById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> params<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> response<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@description</span> 通过 id 更新指定的 todo 元素\n   * <span class="token keyword">@route</span> PUT todos/:id\n   */</span>\n  <span class="token function-variable function">updateTodoById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> params<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      request<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n      response<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@description</span> 通过 id 删除指定的 todo 元素\n   * <span class="token keyword">@route</span> DELETE todos/:id\n   */</span>\n  <span class="token function-variable function">deleteTodoById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> params<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> response<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这个文件目前同样是空的内容，现在开始一一将其填充吧。</p>\n<h3 id="%5Bget%5D-%E8%8E%B7%E5%8F%96%E5%85%A8%E9%83%A8-todos-%E7%9A%84-api">[Get] 获取全部 Todos 的 API<a class="anchor" href="#%5Bget%5D-%E8%8E%B7%E5%8F%96%E5%85%A8%E9%83%A8-todos-%E7%9A%84-api">§</a></h3>\n<p>在 <code>models/todo.ts</code> 文件中为 <code>getAll</code> 方法添加具体逻辑：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">import</span> client <span class="token keyword">from</span> <span class="token string">"../db/client.ts"</span><span class="token punctuation">;</span>\n<span class="token comment">// config</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">TABLE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../db/config.ts"</span><span class="token punctuation">;</span>\n<span class="token comment">// Interface</span>\n<span class="token keyword">import</span> <span class="token maybe-class-name">Todo</span> <span class="token keyword">from</span> <span class="token string">"../interfaces/Todo.ts"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n   <span class="token doc-comment comment">/**\n   * 将会返回所有 todo 表中的数据\n   * <span class="token keyword">@returns</span> array of todos\n   */</span>\n  <span class="token function-variable function">getAll</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT * FROM </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们这里直接用 SQL 原生语法来获取表中的所有内容。</p>\n<p>除了 <code>connect</code>（使用于 db/client.ts 文件中）方法外， <code>Client</code> 还公开了另一种方法，即 <code>query</code>。通过 <code>client.query</code> 方法，我们可以直接从 Deno 代码上运行 MySQL 查询。</p>\n<p>接下来打开 <code>controllers/todo.ts</code> 文件并为 <code>getAllTodos</code> 填充内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// interfaces</span>\n<span class="token keyword">import</span> <span class="token maybe-class-name">Todo</span> <span class="token keyword">from</span> <span class="token string">"../interfaces/Todo.ts"</span><span class="token punctuation">;</span>\n<span class="token comment">// models</span>\n<span class="token keyword">import</span> <span class="token maybe-class-name">TodoModel</span> <span class="token keyword">from</span> <span class="token string">"../models/todo.ts"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token doc-comment comment">/**\n   * <span class="token keyword">@description</span> 获取所有 todo\n   * <span class="token keyword">@route</span> GET /todos\n   */</span>\n  <span class="token function-variable function">getAllTodos</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> response<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        data<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们这里所做的就是导入 <code>TodoModel</code> 对象并使用其中我们刚定义不久的 <code>getAll</code> 方法。因为需要该函数需要处理 Promise 类型的异步过程，所以我们将整个函数定义为 async/await 类型。</p>\n<p><code>TodoModel.getAll()</code> 方法返回一个数组后，我们将这个数组包装起来并将 <code>response.body</code> 的响应状态 <code>status</code> 设置为 <code>200</code>。</p>\n<p>如果执行过程中有任何异常比如 Promise 报错，程序将通过进入 catch 块，向用户返回状态码为 400 的响应体（此时 <code>success</code> 为 false，<code>message</code> 为错误原因。</p>\n<p>就这么简单地搞定了，现在来在终端上运行。</p>\n<p>请保证你的 MySQL 实例运行中，然后在终端输入：</p>\n<pre class="language-bash"><code class="language-bash">$ deno run --allow-net server.ts \n</code></pre>\n<p>不出意外的话，此时你的终端会有这样类似的结果：</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120604886-50fe6669-3837-4a82-bcb6-a2673aff83f4.png#align=left&amp;display=inline&amp;height=146&amp;margin=%5Bobject%20Object%5D&amp;originHeight=146&amp;originWidth=1866&amp;size=0&amp;status=done&amp;style=none&amp;width=1866" alt=""></p>\n<p>这也是当我通过命令行运行服务器时终端的样子。</p>\n<p>终端告诉了我们两件事：</p>\n<ol>\n<li>Deno API 服务器成功运行在了 8080 端口上；</li>\n<li>Deno API 服务器程序成功连接到了 MySQL 客户端 <code>127.0.0.1:3306</code> （<code>http://localhost:3306</code>）上。</li>\n</ol>\n<p>让我们测试下我们的 API，我使用的是 <a href="https://www.postman.com/">Postman</a>，但是你可以用任何你喜欢的 API 测试工具。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120600946-d327c4cb-9ad2-476d-9e34-c7d948da6c1d.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [GET] localhost:8080/todos 后，我们得到了所有 todos 列表。</p>\n<p>虽然现在的 todos 列表返回的是空数组，但当我们能成功给 <code>todo</code> 数据表增加数据后就会获得更多数据。</p>\n<p>棒极了，一个 API 搞定只剩下四个要搞。</p>\n<h3 id="%5Bpost%5D-%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA-todo-%E7%9A%84-api">[Post] 新增一个 Todo 的 API<a class="anchor" href="#%5Bpost%5D-%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA-todo-%E7%9A%84-api">§</a></h3>\n<p>在 <code>models/todo.ts</code> 文件中，为 <code>add()</code> 函数添加如下内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n   <span class="token doc-comment comment">/**\n   * 为 todo 数据表新增一行数据\n   * <span class="token keyword">@param</span> <span class="token parameter">todo</span>\n   * <span class="token keyword">@param</span> <span class="token parameter">isCompleted</span>\n   */</span>\n  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> todo<span class="token punctuation">,</span> isCompleted <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">INSERT INTO </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(todo, isCompleted) values(?, ?)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">[</span>\n        todo<span class="token punctuation">,</span>\n        isCompleted<span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>add 函数在参数列表中将解构 <code>todo</code> 和 <code>isCompleted</code> 两个变量。</p>\n<p>同时，上面代码的 <code>add: async ({ todo, isCompleted }: Todo) =&gt; {}</code> 片段和 <code>({todo, isCompleted}: {todo:string, isCompleted:boolean})</code> 语句是等价的。但我们已经在  <code>interfaces/Todo.ts</code> 中定义过 Todo 接口：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">interface</span> <span class="token class-name"><span class="token maybe-class-name">Todo</span></span> <span class="token punctuation">{</span>\n  id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  todo<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  isCompleted<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>此时我们将可以简单地写成  <code>add: async ({ todo, isCompleted }: Todo) =&gt; {}</code>。这条语句告诉 TypeScript 当前函数有两个参数：字符串类型的 <code>todo</code>，以及布尔类型的 <code>isCompleted</code>。</p>\n<p>如果你想了解更多关于接口的知识，TypeScript 官方文档上有一个绝佳的介绍，可以查看<a href="https://www.typescriptlang.org/docs/handbook/interfaces.html">这里</a>。</p>\n<p>在 add 函数中还有如下代码：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">return</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">INSERT INTO </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(todo, isCompleted) values(?, ?)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>\n    todo<span class="token punctuation">,</span>\n    isCompleted<span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这是一条 MySQL 查询语句，可以被拆分为如下两个部分：</p>\n<ul>\n<li><code>INSERT INTO ${TABLE.TODO}(todo, isCompleted) values(?, ?)</code>。其中的两个问号意味着这里需要使用到变量的值。</li>\n<li>另一部分 <code>[todo, isCompleted]</code> 是上一部分需要使用的变量，其值将会替代 <code>(?, ?)</code>。</li>\n<li><code>Table.Todo</code> 是一个从  <code>db/config.ts</code> 读取来的字符串，其值为&quot;<code>todo</code>&quot;。</li>\n</ul>\n<p>接下来在我们的控制器 <code>controllers/todo.ts</code> 文件中，编写 <code>createTodo()</code> 函数：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n   <span class="token doc-comment comment">/**\n   * <span class="token keyword">@description</span> 新增一个 todo\n   * <span class="token keyword">@route</span> POST /todos\n   */</span>\n  <span class="token function-variable function">createTodo</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> request<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> request<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> response<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token method function property-access">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token property-access">hasBody</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token string">"No data provided"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span> todo<span class="token operator">:</span> body<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">.</span><span class="token property-access">todo</span><span class="token punctuation">,</span> isCompleted<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token string">"The record was added successfully"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们继续将其拆分为两个部分来介绍：</p>\n<p><strong>第一部分</strong></p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token method function property-access">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token property-access">hasBody</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> <span class="token string">"No data provided"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>我们在这里所做的是检查用户请求当前接口时是否在 body 中传递了请求数据。如果没有的话将返回一个有 <code>400</code> 状态码且包括  <code>success: false</code> 和 <code>message: &lt;erromessage-string&gt;</code> 的响应体。</p>\n<p><strong>第二部分</strong></p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> todo<span class="token operator">:</span> body<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">.</span><span class="token property-access">todo</span><span class="token punctuation">,</span> isCompleted<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> <span class="token string">"The record was added successfully"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>接下来如果没有任何意外错误，则调用 <code>TodoModel.add()</code> 函数并返回一个状态为 <code>200</code> 且给用户提示执行函数成功的响应体。</p>\n<p>否则将进入 catch 代码段，来返回函数执行错误及其原因，正如前文介绍过的 API 一样。</p>\n<p>现在我们搞定了。打开你的终端并且确保你的 MySQL 正在运行。在终端输入：</p>\n<pre class="language-bash"><code class="language-bash">$ deno run --allow-net server.ts\n</code></pre>\n<p>打开 <a href="https://www.postman.com/">Postman</a> 并且测试当前 API 能否正常运行：</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120600265-f1064593-73fd-40c6-9f80-3f57ecf4df96.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [POST] localhost:8080/todos =&gt; 将会为 todo 列表新增一个新的数据。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120601570-1c97b07a-1fe8-4aaf-aca9-378529e5b5b5.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>再次执行 [GET] localhost:8080/todos =&gt; 将会返回所有 todos，可以看到刚刚新增 todo 已经被加入到数据库中。</p>\n<p>很棒，已经搞定了两个 API，只剩三个要做。</p>\n<h3 id="%5Bget%5D-%E9%80%9A%E8%BF%87-id-%E6%9F%A5%E8%AF%A2%E6%9F%90-todo-%E7%9A%84-api">[GET] 通过 ID 查询某 Todo 的 API<a class="anchor" href="#%5Bget%5D-%E9%80%9A%E8%BF%87-id-%E6%9F%A5%E8%AF%A2%E6%9F%90-todo-%E7%9A%84-api">§</a></h3>\n<p>在你的 <code>models/todo.ts</code> 文件中，为 <code>doesExistById()</code> 和 <code>getById()</code> 两个函数填充其内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n   <span class="token doc-comment comment">/**\n   * Takes in the id params &amp; checks if the todo item exists\n   * in the database\n   * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n   * <span class="token keyword">@returns</span> boolean to tell if an entry of todo exits in table\n   */</span>\n  <span class="token function-variable function">doesExistById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT COUNT(*) count FROM </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> WHERE id = ? LIMIT 1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token property-access">count</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token doc-comment comment">/**\n   * 解构 id 变量 &amp; 返回找到的相关 todo\n   * against it.\n   * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n   * <span class="token keyword">@returns</span> object of todo item\n   */</span>\n  <span class="token function-variable function">getById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT * FROM </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> WHERE id = ?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>让我们逐个介绍这两个函数：</p>\n<ul>\n<li><code>doesExistById</code> 函数从参数列表中解构出 <code>id</code> 变量，并返回一个 <code>boolean</code> 布尔值，来表明想要检测的这个独特 todo 是否存在于数据库中。</li>\n</ul>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">[</span>result<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT COUNT(*) count FROM </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> WHERE id = ? LIMIT 1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token property-access">count</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>\n</code></pre>\n<p>我们通过 count 值来检查指定 todo 是否存在。如果其值大于 0 返回 <code>true</code>，否则返回 <code>false</code>。</p>\n<ul>\n<li><code>getById</code> 函数通过指定的 id 返回相应的数据：</li>\n</ul>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">return</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT * FROM </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> WHERE id = ?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>上面一行代码直接执行了 MySQL 语句，来通过 id 查询数据并返回结果。</p>\n<p>接下来，打开 <code>controllers/todo.ts</code> 文件并为 <code>getTodoById</code> 控制器填充内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n   <span class="token doc-comment comment">/**\n   * <span class="token keyword">@description</span> 通过 id 获取相关 tod\n   * <span class="token keyword">@route</span> GET todos/:id\n   */</span>\n  <span class="token function-variable function">getTodoById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> params<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> response<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> isAvailable <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">doesExistById</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>\n        response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n          success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n          message<span class="token operator">:</span> <span class="token string">"No todo found"</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">const</span> todo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">getById</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        data<span class="token operator">:</span> todo<span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这段代码也可以拆分为两段更小的部分来看：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> isAvailable <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">doesExistById</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> <span class="token string">"No todo found"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>首先我们通过以下代码来检查想要查找的 todo 是否存在于数据库中：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> isAvailable <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">doesExistById</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>我们在其中需要转换 <code>params.id</code> 为 <code>Number</code> 数值类，因为接口中声明了我们的 <code>id</code> 键值必须是一个数字。接下来我们将转换为数值后的 <code>params.id</code> 传递给 <code>doesExistById</code> 方法，这个方法会返回布尔值。</p>\n<p>接着检查这个布尔值，如果是 false 则返回像前文一样的包含 <code>404</code> 状态码的响应体：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> <span class="token string">"No todo found"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>第二部分是：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> todo<span class="token operator">:</span> <span class="token maybe-class-name">Todo</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">getById</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    data<span class="token operator">:</span> todo<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\n  response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这段代码和前文的很像。我们从数据库中获取到指定数据给 <code>todo</code> 变量，然后返回响应体。如果执行过程中有任何错误则响应体将包含错误信息返回给用户。</p>\n<p>现在打开你的终端并且确保你的 MySQL 正在运行。在终端输入：</p>\n<pre class="language-bash"><code class="language-bash">$ deno run --allow-net server.ts\n</code></pre>\n<p>打开 <a href="https://www.postman.com/">Postman</a> 来测试当前接口能否正常运行。</p>\n<p>请记住我们每次重启服务器时都会重置数据库。如果你不想要这个功能，你可以注释掉 <code>db/client.ts</code> 文件中的整个 <code>run</code> 方法。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120600852-9d266fff-b37f-42fe-a9db-1116c8175077.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [POST] localhost:8080/todos =&gt; 将会新增一个新的 todo。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120600548-03c7b5e9-a429-475b-b6ed-7b0e0b8ae916.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [POST] localhost:8080/todos =&gt; 将会返回所有的 todo。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120601586-f37a1f6e-d480-4822-9dcd-e0c077a49f5a.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [GET] localhost:8080/todos/:id =&gt; 将会当查找指定 todo，并返回其内容。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120602036-5ffdd056-87d9-473d-9818-c3c645fa9993.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [GET] localhost:8080/todos/ =&gt; 将会返回包含 404 状态码及其错误信息的响应体。</p>\n<p>目前我们搞定了如下 API：</p>\n<ul>\n<li>获取所有 todos</li>\n<li>创建一个新的 todo</li>\n<li>通过 ID 获取指定的 Todo</li>\n</ul>\n<p>仅剩下的 API：</p>\n<ul>\n<li>通过 ID 更新指定的 Todo</li>\n<li>通过 ID 删除指定的 Todo</li>\n</ul>\n<h3 id="%5Bput%5D-%E9%80%9A%E8%BF%87-id-%E6%9B%B4%E6%96%B0%E6%9F%90-todo-%E7%9A%84-api">[PUT] 通过 ID 更新某 Todo 的 API<a class="anchor" href="#%5Bput%5D-%E9%80%9A%E8%BF%87-id-%E6%9B%B4%E6%96%B0%E6%9F%90-todo-%E7%9A%84-api">§</a></h3>\n<p>让我们先为这个 API 创建模型（models）代码。进入 <code>models/todo.ts</code> 文件并为 <code>updateById</code> 方法填充其内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token operator">**</span>\n <span class="token operator">*</span> 更新某个指定 todo\n <span class="token operator">*</span> @param id\n <span class="token operator">*</span> @param todo\n <span class="token operator">*</span> @param isCompleted\n <span class="token operator">*</span> @returns <span class="token function">integer</span> <span class="token punctuation">(</span>count <span class="token keyword">of</span> effect rows<span class="token punctuation">)</span>\n <span class="token operator">*</span><span class="token operator">/</span>\n<span class="token function-variable function">updateById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> todo<span class="token punctuation">,</span> isCompleted <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">UPDATE </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> SET todo=?, isCompleted=? WHERE id=?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>\n      todo<span class="token punctuation">,</span>\n      isCompleted<span class="token punctuation">,</span>\n      id<span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// return count of rows updated</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token property-access">affectedRows</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p><code>updateById</code> 方法将会从参数列表解构三个变量：<code>id</code>、<code>todo</code> 以及 <code>isCompleted</code>。</p>\n<p>我们直接编写了 MySQL 语句来执行查询：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">UPDATE </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> SET todo=?, isCompleted=? WHERE id=?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>\n    todo<span class="token punctuation">,</span>\n    isCompleted<span class="token punctuation">,</span>\n    id<span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这段代码将通过 <code>id</code> 来更新指定的 <code>todo</code> 其 <code>isCompleted</code> 的值。</p>\n<p>接下来我们返回此条 MySQL 语句执行后影响到的数据表行数：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// return count of rows updated</span>\n<span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token property-access">affectedRows</span><span class="token punctuation">;</span>\n</code></pre>\n<p>这个行数值只会是 0 或者 1，且绝不会超过 1。因为我们数据表中的 ID 是唯一的——不同 todo 共用同一 ID的情况是不存在的。</p>\n<p>接下来打开 <code>controllers/todo.ts</code> 文件并为 <code>updateTodoById</code> 方法填充其内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token function-variable function">updateTodoById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n  <span class="token punctuation">{</span> params<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    request<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n    response<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> isAvailable <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">doesExistById</span><span class="token punctuation">(</span>\n      <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>\n      response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token string">"No todo found"</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 如果 todo 被找到了则更新它</span>\n    <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token method function property-access">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> updatedRows <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">updateById</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      id<span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token spread operator">...</span>body<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n    response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Successfully updated </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>updatedRows<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> row(s)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\n    response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p>这段代码和前文的几个 API 中的代码几乎一样。与众不同的地方在这里：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// if todo found then update todo</span>\n<span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token method function property-access">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> updatedRows <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">updateById</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token spread operator">...</span>body<span class="token punctuation">.</span><span class="token property-access">value</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>我们将用户传递来的 JSON 格式的 body 数据直接传给 <code>TodoModel.updateById</code> 函数。</p>\n<p>记得需要转换 <code>id</code> 的变量类型为数值型以遵循接口的类型约束。</p>\n<p>这行代码执行后将返回受到影响的行数。我们直接将其包装在响应体里返回。执行过程中如果有任何错误，将会被 catch 到并返回通用的报错信息。</p>\n<p>让我们来重启服务器来检查是否能成功运行。请确保你的 MySQL 正在运行并在终端输入：</p>\n<pre class="language-typescript"><code class="language-typescript">$ deno run <span class="token operator">--</span>allow<span class="token operator">-</span>net server<span class="token punctuation">.</span><span class="token property-access">ts</span>\n</code></pre>\n<p>打开 <a href="https://www.postman.com/">Postman</a> 来测试当前接口能否正常运行：</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120601980-528ffcbb-5171-47c4-a88a-e11a849e86e7.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [PUT] localhost:8080/todos/:id =&gt; 将会通过指定的 id 来更新相应的 todo 内容</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120605861-56dee4d7-1a70-4c0a-84ee-96d2b9301ed7.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [GET] localhost:8080/todos/ =&gt; 将会返回所有 todo 列表，来验证是否更新成功。</p>\n<h3 id="%5Bdelete%5D-%E9%80%9A%E8%BF%87-id-%E5%88%A0%E9%99%A4%E6%9F%90-todo-%E7%9A%84-api">[DELETE] 通过 ID 删除某 Todo 的 API<a class="anchor" href="#%5Bdelete%5D-%E9%80%9A%E8%BF%87-id-%E5%88%A0%E9%99%A4%E6%9F%90-todo-%E7%9A%84-api">§</a></h3>\n<p>在你的 <code>models/todo.ts</code> 文件中创建一个 <code>deleteById</code> 函数并填充如下内容：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token doc-comment comment">/**\n * 通过指定 ID 来删除相应 todo\n * <span class="token keyword">@param</span> <span class="token parameter">id</span>\n * <span class="token keyword">@returns</span> integer (count of effect rows)\n */</span>\n<span class="token function-variable function">deleteById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Todo</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DELETE FROM </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">TABLE</span><span class="token punctuation">.</span><span class="token constant">TODO</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> WHERE id = ?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// return count of rows updated</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token property-access">affectedRows</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p>这里我们根据解构出的 <code>id</code> 值来通过 MySQL 删除指定的元素，并返回受到影响的行数。影响的行数的值依然只能是 0 或者 1，因为这个 ID 最多只会对应一个元素。</p>\n<p>接下来，打开 <code>controllers/todo.ts</code> 文件并填充 <code>deleteByTodoId</code> 方法：</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token doc-comment comment">/**\n * <span class="token keyword">@description</span> 通过指定 ID 来删除相应 todo \n * <span class="token keyword">@route</span> DELETE todos/:id\n */</span>\n<span class="token function-variable function">deleteTodoById</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>\n  <span class="token punctuation">{</span> params<span class="token punctuation">,</span> response <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> response<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> updatedRows <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">TodoModel</span><span class="token punctuation">.</span><span class="token method function property-access">deleteById</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      id<span class="token operator">:</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n    response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Successfully updated </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>updatedRows<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> row(s)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    response<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\n    response<span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n<p>这里很“爽快”地将解构出的 <code>params.id</code> 交给 <code>TodoModel.deleteById</code> 发方法，并返回此次执行过程中在数据库中的影响行数。</p>\n<p>如果执行过程中有任何错误都会返回标准错误响应体。</p>\n<p>让我们来检查这个 API 能否成功运行。</p>\n<p>请确保你的 MySQL 正在运行，并在终端输入：</p>\n<pre class="language-bash"><code class="language-bash">$ deno run --allow-net server.ts\n</code></pre>\n<p>打开 <a href="https://www.postman.com/">Postman</a> 来测试：</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120601647-4163c485-9b93-40b7-95d5-7f89581d2e4c.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [GET] localhost:8080/todos/ =&gt; 将会得到所有 todo。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120600928-ca4557e3-eef7-48ce-8d55-4e7b81d49507.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [DELETE] localhost:8080/todos/:id =&gt; 将会通过指定的 id 删除相应元素。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2020/png/86548/1592120601874-96619e89-242c-407b-8df6-09280e6d90d9.png#align=left&amp;display=inline&amp;height=1165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1165&amp;originWidth=2000&amp;size=0&amp;status=done&amp;style=none&amp;width=2000" alt=""></p>\n<p>执行 [GET] localhost:8080/todos/ =&gt; 将会返回所有 todo 列表，来看看之前想要删除的 todo 是否还在。</p>\n<p>到了这里我们就结束了 Deno + Oak + MySQL 的实战教程。</p>\n<p>整篇文章的代码可以在这里看到：<a href="https://github.com/adeelibr/deno-playground">https://github.com/adeelibr/deno-playground</a>。如果你有任何问题都可以在上面交流。或者提交你的 PR 到仓库中。</p>\n<p>如果你感觉本系列很有帮助，可以分享它到社交网络中。同时我的 <a href="https://twitter.com/adeelibr">Twitter 账号是 @adeelibr</a>。我会很期待听到你的任何想法。</p>\n'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#%E8%AE%A9%E6%88%91%E4%BB%AC%E5%BC%80%E5%A7%8B%E5%90%A7">让我们开始吧</a></li><li><a href="#%E5%9C%A8%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%B8%8A%E6%89%A7%E8%A1%8C-crud-%E6%93%8D%E4%BD%9C%E5%B9%B6%E5%B0%86%E5%8A%9F%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%88%B0-api-%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD">在数据表上执行 CRUD 操作并将功能添加到 API 控制器中</a><ol><li><a href="#%5Bget%5D-%E8%8E%B7%E5%8F%96%E5%85%A8%E9%83%A8-todos-%E7%9A%84-api">[Get] 获取全部 Todos 的 API</a></li><li><a href="#%5Bpost%5D-%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA-todo-%E7%9A%84-api">[Post] 新增一个 Todo 的 API</a></li><li><a href="#%5Bget%5D-%E9%80%9A%E8%BF%87-id-%E6%9F%A5%E8%AF%A2%E6%9F%90-todo-%E7%9A%84-api">[GET] 通过 ID 查询某 Todo 的 API</a></li><li><a href="#%5Bput%5D-%E9%80%9A%E8%BF%87-id-%E6%9B%B4%E6%96%B0%E6%9F%90-todo-%E7%9A%84-api">[PUT] 通过 ID 更新某 Todo 的 API</a></li><li><a href="#%5Bdelete%5D-%E9%80%9A%E8%BF%87-id-%E5%88%A0%E9%99%A4%E6%9F%90-todo-%E7%9A%84-api">[DELETE] 通过 ID 删除某 Todo 的 API</a></li></ol></li></ol></nav>'
        } })
};
