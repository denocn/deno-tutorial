import projectConfig from '/pagic.config.js';
import Ga from '/_ga.js';
import Gitalk from '/_gitalk.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "articles/translation/original-articles/from-node-to-deno.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "articles/translation/original-articles/from-node-to-deno.html",
    'title': "From Node to Deno",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1><a href="https://aralroca.com/blog/from-node-to-deno">From Node to Deno</a></h1>\n<p>Last week I published an article about Deno, and how to create a <a href="https://aralroca.com/blog/learn-deno-chat-app">Chat app with Deno and Preact</a>. Since then, many doubts have arisen. Mostly of them are about how to do the same thing we did in Node, but with the new Deno ecosystem.</p>\n<p>I\'ve tried to collect some of the most used topics in Node, and looked for their alternative with Deno. First of all, I would like to make it clear that we can use many of the current Node.js modules. There is no need to look for an alternative for everything, as many modules are reusable. You can visit <a href="https://www.pika.dev/about">pika.dev</a> to look for modules to use in Deno. That said, let\'s start with the list:</p>\n<p><strong>We will cover the following:</strong></p>\n<ul>\n<li><a href="#from-node-to-deno">From Node to Deno</a>\n<ul>\n<li><a href="#electron">Electron</a></li>\n<li><a href="#forever--pm2">Forever / PM2</a></li>\n<li><a href="#express--koa">Express / Koa</a>\n<ul>\n<li><a href="#http-std-lib">Http (std lib)</a></li>\n<li><a href="#oak-third-party-lib">Oak (Third party lib)</a></li>\n<li><a href="#abc-third-party-lib">Abc (Third party lib)</a></li>\n<li><a href="#deno-express-third-party-lib">Deno-express (Third party lib)</a></li>\n</ul>\n</li>\n<li><a href="#mongodb">MongoDB</a></li>\n<li><a href="#postgressql">PostgresSQL</a></li>\n<li><a href="#mysql--mariadb">MySQL / MariaDB</a></li>\n<li><a href="#redis">Redis</a></li>\n<li><a href="#nodemon">Nodemon</a></li>\n<li><a href="#jest-jasmine-ava">Jest, Jasmine, Ava...</a></li>\n<li><a href="#webpack-parcel-rollup">Webpack, Parcel, Rollup...</a></li>\n<li><a href="#prettier">Prettier</a></li>\n<li><a href="#npm-scripts">NPM Scripts</a></li>\n<li><a href="#nvm">Nvm</a></li>\n<li><a href="#npx">Npx</a></li>\n<li><a href="#run-on-a-docker">Run on a Docker</a></li>\n<li><a href="#run-as-a-lambda">Run as a lambda</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul>\n</li>\n</ul>\n<h2 id="electron">Electron<a class="anchor" href="#electron">§</a></h2>\n<p>With Node.js we can create desktop applications using <a href="https://github.com/electron/electron">Electron</a>. Electron uses Chromium as interface to run a web environment. But, can we use Electron with Deno? Are there alternatives?</p>\n<p><img src="https://aralroca.com/images/blog-images/55.png" alt=""></p>\n<p>Well, right now Electron is far from being able to be executed under Deno. We must look for alternatives. Since Deno is made with Rust, we can use <a href="https://github.com/Boscop/web-view">web-view rust bindings</a> to run Destkop application in Deno.</p>\n<p>This way, we can use the native OS webview to run as many webviews as we want.</p>\n<p><strong>Repo</strong>: <a href="https://github.com/eliassjogreen/deno_webview">https://github.com/eliassjogreen/deno_webview</a></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">WebView</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/webview/mod.ts">https://deno.land/x/webview/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> sharedOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  width<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>\n  height<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  resizable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  debug<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  frameless<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> webview1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">"Multiple deno_webview example"</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data:text/html,\n    &lt;html>\n    &lt;body>\n      &lt;h1>1&lt;/h1>\n    &lt;/body>\n    &lt;/html>\n    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token spread operator">...</span>sharedOptions<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> webview2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">"Multiple deno_webview example"</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data:text/html,\n    &lt;html>\n    &lt;body>\n      &lt;h1>2&lt;/h1>\n    &lt;/body>\n    &lt;/html>\n    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token spread operator">...</span>sharedOptions<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">await</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>webview1<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> webview2<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><img src="https://aralroca.com/images/blog-images/40.jpg" alt=""></p>\n<h2 id="forever--pm2">Forever / PM2<a class="anchor" href="#forever--pm2">§</a></h2>\n<p><a href="https://github.com/foreversd/forever">Forever</a> and <a href="https://github.com/Unitech/pm2">PM2</a> are CLI tools for ensuring that a given script runs continuously as a daemon. Unlike Forever, PM2 is more complete and also serves as load balancer. Both are very useful in Node, but can we use them in Deno?</p>\n<p>Forever is intended for Node only, so using it is not feasible. On the other hand, with PM2 we can run non-node scripts, so we could still use it for Deno.</p>\n<p><img src="https://aralroca.com/images/blog-images/56.png" alt=""></p>\n<p>Creating an <code>app.sh</code> file</p>\n<pre class="language-autoit"><code class="language-autoit">#!<span class="token operator">/</span>bin<span class="token operator">/</span>bash\ndeno run <span class="token operator">-</span>A myCode<span class="token punctuation">.</span>ts\n</code></pre>\n<p>And</p>\n<pre class="language-autoit"><code class="language-autoit">➜ pm2 start <span class="token punctuation">.</span><span class="token operator">/</span>app<span class="token punctuation">.</span>sh \n</code></pre>\n<p><img src="https://aralroca.com/images/blog-images/41.png" alt=""></p>\n<h2 id="express--koa">Express / Koa<a class="anchor" href="#express--koa">§</a></h2>\n<p><a href="https://github.com/expressjs/express">Express</a> and <a href="https://github.com/koajs/koa">Koa</a> are the best known Node frameworks. They\'re known for their robust routing system and their HTTP helpers (redirection, caching, etc). Can we use them in Deno? The answer is not... But there are some alternatives.</p>\n<p><img src="https://aralroca.com/images/blog-images/42.png" alt=""></p>\n<h3 id="http-std-lib">Http (std lib)<a class="anchor" href="#http-std-lib">§</a></h3>\n<p>Deno\'s own STD library already covers many of the needs provided by Express or Koa. <a href="https://deno.land/std/http/">https://deno.land/std/http/</a>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">ServerRequest</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/std/http/server.ts">https://deno.land/std/http/server.ts</a>"</span><span class="token punctuation">;</span>\n<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getCookies <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/std/http/cookie.ts">https://deno.land/std/http/cookie.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrequest<span class="token punctuation">.</span><span class="token property-access">headers</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrequest<span class="token punctuation">.</span><span class="token property-access">headers</span><span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> <span class="token string">"full=of; tasty=chocolate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cookies <span class="token operator">=</span> <span class="token function">getCookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"cookies:"</span><span class="token punctuation">,</span> cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>However, the way to declare routes is not very attractive. So let\'s look at some more alternatives.</p>\n<h3 id="oak-third-party-lib">Oak (Third party lib)<a class="anchor" href="#oak-third-party-lib">§</a></h3>\n<p>One of the most elegant solutions right now, very inspired by Koa. <a href="https://github.com/oakserver/oak">https://github.com/oakserver/oak</a></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Application</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/oak/mod.ts">https://deno.land/x/oak/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">await</span> app<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="abc-third-party-lib">Abc (Third party lib)<a class="anchor" href="#abc-third-party-lib">§</a></h3>\n<p>Similar to Oak. <a href="https://deno.land/x/abc">https://deno.land/x/abc</a>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Application</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/abc/mod.ts">https://deno.land/x/abc/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">static</span><span class="token punctuation">(</span><span class="token string">"/static"</span><span class="token punctuation">,</span> <span class="token string">"assets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token string">"Hello!"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token method function property-access">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="deno-express-third-party-lib">Deno-express (Third party lib)<a class="anchor" href="#deno-express-third-party-lib">§</a></h3>\n<p>Maybe the most similar alternative to Express Framework. <a href="https://github.com/NMathar/deno-express">https://github.com/NMathar/deno-express</a>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> exp</span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://raw.githubusercontent.com/NMathar/deno-express/master/mod.ts">https://raw.githubusercontent.com/NMathar/deno-express/master/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">exp<span class="token punctuation">.</span>App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token method function property-access">static_</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token property-access">bodyParser</span><span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/api/todos"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">await</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"Buy some milk"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword control-flow">await</span> app<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>server<span class="token punctuation">.</span><span class="token property-access">port</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="mongodb">MongoDB<a class="anchor" href="#mongodb">§</a></h2>\n<p><a href="https://github.com/mongodb/mongo">MongoDB</a> is a document database with a huge scability and flexibility. In the JavaScript ecosystem has been widely used, with many stacks like MEAN or MERN that use it. It\'s very popular.</p>\n<p><img src="https://aralroca.com/images/blog-images/43.png" alt=""></p>\n<p>So yes, we can use MongoDB with Deno. To do this, we can use this driver: <a href="https://github.com/manyuanrong/deno_mongo">https://github.com/manyuanrong/deno_mongo</a>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> init<span class="token punctuation">,</span> <span class="token maybe-class-name">MongoClient</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/mongo@v0.6.0/mod.ts">https://deno.land/x/mongo@v0.6.0/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialize the plugin</span>\n<span class="token keyword control-flow">await</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nclient<span class="token punctuation">.</span><span class="token method function property-access">connectWithUri</span><span class="token punctuation">(</span><span class="token string">"<a class="token url-link" href="mongodb://localhost:27017">mongodb://localhost:27017</a>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token method function property-access">database</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> users <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token method function property-access">collection</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// insert</span>\n<span class="token keyword">const</span> insertId <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">insertOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  username<span class="token operator">:</span> <span class="token string">"user1"</span><span class="token punctuation">,</span>\n  password<span class="token operator">:</span> <span class="token string">"pass1"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// findOne</span>\n<span class="token keyword">const</span> user1 <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token operator">:</span> insertId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// find</span>\n<span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token punctuation">{</span> $ne<span class="token operator">:</span> <span class="token keyword null nil">null</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// aggregation</span>\n<span class="token keyword">const</span> docs <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">aggregation</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> $match<span class="token operator">:</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">"many"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> $group<span class="token operator">:</span> <span class="token punctuation">{</span> _id<span class="token operator">:</span> <span class="token string">"$username"</span><span class="token punctuation">,</span> total<span class="token operator">:</span> <span class="token punctuation">{</span> $sum<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// updateOne</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> matchedCount<span class="token punctuation">,</span> modifiedCount<span class="token punctuation">,</span> upsertedId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">updateOne</span><span class="token punctuation">(</span>\n  username<span class="token operator">:</span> <span class="token punctuation">{</span> $ne<span class="token operator">:</span> <span class="token keyword null nil">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> $set<span class="token operator">:</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">"USERNAME"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// deleteOne</span>\n<span class="token keyword">const</span> deleteCount <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token operator">:</span> insertId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="postgressql">PostgresSQL<a class="anchor" href="#postgressql">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/44.png" alt=""></p>\n<p>Like MongoDB, there is also a driver for <a href="https://github.com/postgres/postgres/">PostgresSQL</a>.</p>\n<ul>\n<li><a href="https://github.com/buildondata/deno-postgres">https://github.com/buildondata/deno-postgres</a>.</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Client</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/postgres/mod.ts">https://deno.land/x/postgres/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  user<span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>\n  database<span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>\n  hostname<span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>\n  port<span class="token operator">:</span> <span class="token number">5432</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword control-flow">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM people;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token property-access">rows</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="mysql--mariadb">MySQL / MariaDB<a class="anchor" href="#mysql--mariadb">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/45.png" alt=""></p>\n<p>As with MongoDB and PostgresSQL, there is also a driver for <a href="https://github.com/mysqljs/mysql">MySQL</a> / <a href="https://github.com/mariadb-corporation/mariadb-connector-nodejs">MariaDB</a>.</p>\n<ul>\n<li><a href="https://github.com/manyuanrong/deno_mysql">https://github.com/manyuanrong/deno_mysql</a></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Client</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/mysql/mod.ts">https://deno.land/x/mysql/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hostname<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>\n  db<span class="token operator">:</span> <span class="token string">"dbname"</span><span class="token punctuation">,</span>\n  poolSize<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// connection limit</span>\n  password<span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword control-flow">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">INSERT INTO users(name) values(?)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token string">"aralroca"</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// { affectedRows: 1, lastInsertId: 1 }</span>\n</code></pre>\n<h2 id="redis">Redis<a class="anchor" href="#redis">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/46.png" alt=""></p>\n<p><a href="https://github.com/NodeRedis/node-redis">Redis</a>, the best known database for caching, has also a driver for Deno.</p>\n<ul>\n<li><a href="https://github.com/keroxp/deno-redis">https://github.com/keroxp/deno-redis</a></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> connect <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://denopkg.com/keroxp/deno-redis/mod.ts">https://denopkg.com/keroxp/deno-redis/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hostname<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>\n  port<span class="token operator">:</span> <span class="token number">6379</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ok <span class="token operator">=</span> <span class="token keyword control-flow">await</span> redis<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">,</span> <span class="token string">"this is an example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token keyword control-flow">await</span> redis<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="nodemon">Nodemon<a class="anchor" href="#nodemon">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/47.png" alt=""></p>\n<p><a href="https://github.com/remy/nodemon">Nodemon</a> is used in development environment to monitor any changes in your files, automatically restarting the server. This makes node development much more enjoyable, without having to manually stop and restart the server to see the applied changes. Can it be used in Deno?</p>\n<p>Sorry, but you can\'t... but still, there is an alternative: Denon.</p>\n<ul>\n<li><a href="https://github.com/eliassjogreen/denon">https://github.com/eliassjogreen/denon</a></li>\n</ul>\n<p>We can use Denon as we use <code>deno run</code> to execute scripts.</p>\n<pre class="language-autoit"><code class="language-autoit">➜ denon server<span class="token punctuation">.</span>ts\n</code></pre>\n<h2 id="jest-jasmine-ava">Jest, Jasmine, Ava...<a class="anchor" href="#jest-jasmine-ava">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/48.png" alt=""></p>\n<p>In the Node.js ecosystem there are a lot of alternatives for test runners. However, there isn\'t one official way to test the Node.js code.</p>\n<p>In Deno, there is an official way, you can use the testing std library.</p>\n<ul>\n<li><a href="https://deno.land/std/testing">https://deno.land/std/testing</a></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> assertStrictEq <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/std/testing/asserts.ts">https://deno.land/std/testing/asserts.ts</a>\'</span>\n\n<span class="token maybe-class-name">Deno</span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'My first test\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">assertStrictEq</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>To run the tests:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  deno test\n</code></pre>\n<h2 id="webpack-parcel-rollup">Webpack, Parcel, Rollup...<a class="anchor" href="#webpack-parcel-rollup">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/52.png" alt=""></p>\n<p>One of the strengths of Deno is that we can use ESmodules with TypeScript without the need for a bundler such as <a href="https://github.com/webpack/webpack">Webpack</a>, <a href="https://github.com/parcel-bundler/parcel">Parcel</a> or <a href="https://github.com/rollup/rollup">Rollup</a>.</p>\n<p>However, probably you wonder if given a tree of files, we can make a bundle to put everything in one file to run it on the web.</p>\n<p>Well, it\'s possible, yes. We can do it with Deno\'s CLI. Thus, there\'s no need for a third-party bundler.</p>\n<pre class="language-autoit"><code class="language-autoit">➜ deno bundle myLib<span class="token punctuation">.</span>ts myLib<span class="token punctuation">.</span>bundle<span class="token punctuation">.</span>js\n</code></pre>\n<p>Now it\'s ready to be loaded in the browser:</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> myLib</span> <span class="token keyword module">from</span> <span class="token string">"myLib.bundle.js"</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n<h2 id="prettier">Prettier<a class="anchor" href="#prettier">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/49.png" alt=""></p>\n<p>In the last few years <a href="https://prettier.io/">Prettier</a> has become quite well known within the JavaScript ecosystem because with it you don\'t have to worry about formatting the files.</p>\n<p>And the truth is, it can still be used on Deno but it loses its meaning, because Deno has its own formatter.</p>\n<p>You can format your files using this command:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  deno fmt\n</code></pre>\n<h2 id="npm-scripts">NPM Scripts<a class="anchor" href="#npm-scripts">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/50.png" alt=""></p>\n<p>With Deno, the <code>package.json</code> no longer exists. One of the things I really miss are the scripts that were declared in the <code>package.json</code>.</p>\n<p>A simple solution would be to use a <code>makefile</code> and execute it with <code>make</code>. However, if you miss the npm syntax, there is an npm-style script runner for Deno:</p>\n<ul>\n<li><a href="https://github.com/umbopepato/velociraptor">https://github.com/umbopepato/velociraptor</a></li>\n</ul>\n<p>You can define a file with your scripts:</p>\n<pre class="language-yaml"><code class="language-yaml"><span class="token comment"># scripts.yaml</span>\n<span class="token key atrule">scripts</span><span class="token punctuation">:</span>\n  <span class="token key atrule">start</span><span class="token punctuation">:</span> deno run <span class="token punctuation">-</span><span class="token punctuation">-</span>allow<span class="token punctuation">-</span>net server.ts\n  <span class="token key atrule">test</span><span class="token punctuation">:</span> deno test <span class="token punctuation">-</span><span class="token punctuation">-</span>allow<span class="token punctuation">-</span>net server_test.ts\n</code></pre>\n<p>Execute with:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  vr run <span class="token operator">&lt;</span>SCRIPT<span class="token operator">></span>\n</code></pre>\n<p>Another alternative is <a href="https://github.com/BentoumiTech/denox">denox</a>, very similar to Velociraptor.</p>\n<h2 id="nvm">Nvm<a class="anchor" href="#nvm">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/51.png" alt=""></p>\n<p><a href="https://github.com/nvm-sh/nvm">Nvm</a> is a CLI to manage multiple active Node versions, to easy upgrade or downgrade versions depending on your projects.</p>\n<p>A <code>nvm</code> equivalent in Deno is <code>dvm</code>.</p>\n<ul>\n<li><a href="https://github.com/axetroy/dvm">https://github.com/axetroy/dvm</a></li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">➜  dvm use <span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">0</span>\n</code></pre>\n<h2 id="npx">Npx<a class="anchor" href="#npx">§</a></h2>\n<p><a href="https://github.com/npm/npx">Npx</a> in recent years has become very popular to execute npm packages without having to install them. Now many projects won\'t exist within npm because Deno is a separate ecosystem. So, how can we execute Deno modules without having to install them with <code>deno install https://url-of-module.ts</code>?</p>\n<p>In the same way that we run our project, instead of a file we put the URL of the module:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  deno run https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>deno<span class="token punctuation">.</span>land<span class="token operator">/</span>std<span class="token operator">/</span>examples<span class="token operator">/</span>welcome<span class="token punctuation">.</span>ts\n</code></pre>\n<p>As you can see, not only we have to remember the name of the module, but the whole URL, which makes it a little more difficult to use. On the other hand it gives a lot more flexibility as we can run any file, not just what\'s specified as a binary in the <code>package.json</code> like <code>npx</code>.</p>\n<h2 id="run-on-a-docker">Run on a Docker<a class="anchor" href="#run-on-a-docker">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/53.png" alt=""></p>\n<p>To run Deno inside a Docker, we can create this Dockerfile:</p>\n<pre class="language-dockerfile"><code class="language-dockerfile"><span class="token keyword">FROM</span> hayd/alpine<span class="token punctuation">-</span>deno<span class="token punctuation">:</span>1.0.0\n\n<span class="token keyword">EXPOSE</span> 1993  <span class="token comment"># Port.</span>\n\n<span class="token keyword">WORKDIR</span> /app\n\n<span class="token keyword">USER</span> deno\n\n<span class="token keyword">COPY</span> deps.ts .\n<span class="token keyword">RUN</span> deno cache deps.ts <span class="token comment"># Cache the deps</span>\n\n<span class="token keyword">ADD</span> . .\n<span class="token keyword">RUN</span> deno cache main.ts <span class="token comment"># main entrypoint.</span>\n\n<span class="token keyword">CMD</span> <span class="token punctuation">[</span><span class="token string">"--allow-net"</span><span class="token punctuation">,</span> <span class="token string">"main.ts"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>To build + run it:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  docker build <span class="token operator">-</span>t app <span class="token punctuation">.</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> docker run <span class="token operator">-</span>it <span class="token operator">-</span><span class="token operator">-</span>init <span class="token operator">-</span>p <span class="token number">1993</span><span class="token punctuation">:</span><span class="token number">1993</span> app\n</code></pre>\n<p>Repo: <a href="https://github.com/hayd/deno-docker">https://github.com/hayd/deno-docker</a></p>\n<h2 id="run-as-a-lambda">Run as a lambda<a class="anchor" href="#run-as-a-lambda">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/54.png" alt=""></p>\n<p>To use Deno as a lambda, there is a module in Deno STD library. <a href="https://deno.land/x/lambda">https://deno.land/x/lambda</a>.</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span>\n  APIGatewayProxyEvent<span class="token punctuation">,</span>\n  APIGatewayProxyResult<span class="token punctuation">,</span>\n  Context\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/lambda/mod.ts">https://deno.land/x/lambda/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>\n  event<span class="token operator">:</span> APIGatewayProxyEvent<span class="token punctuation">,</span>\n  context<span class="token operator">:</span> Context\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>APIGatewayProxyResult<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    body<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Welcome to deno </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Deno<span class="token punctuation">.</span>version<span class="token punctuation">.</span>deno<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 🦕</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"text/html;charset=utf8"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    statusCode<span class="token operator">:</span> <span class="token number">200</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Interesting references:</p>\n<ul>\n<li>Deno in Vercel: <a href="https://github.com/lucacasonato/now-deno">https://github.com/lucacasonato/now-deno</a></li>\n<li>Deno in AWS: <a href="https://blog.begin.com/deno-runtime-support-for-architect-805fcbaa82c3">https://blog.begin.com/deno-runtime-support-for-architect-805fcbaa82c3</a></li>\n</ul>\n<h2 id="conclusion">Conclusion<a class="anchor" href="#conclusion">§</a></h2>\n<p>I\'m sure I forgot some Node topics and their Deno alternative, let me know if there\'s anything I missed that you\'d like me to explain. I hope this article helps you break the ice with Deno.</p>\n<p>To explore all libraries you can use with Deno:</p>\n<ul>\n<li><a href="https://deno.land/std">https://deno.land/std</a></li>\n<li><a href="https://deno.land/x">https://deno.land/x</a></li>\n<li><a href="https://www.pika.dev/">https://www.pika.dev/</a></li>\n</ul>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement(Ga, { id: "UA-169223577-1" }),
        React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" },
        React.createElement("a", { href: "https://aralroca.com/blog/from-node-to-deno" }, "From Node to Deno")),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>Last week I published an article about Deno, and how to create a <a href="https://aralroca.com/blog/learn-deno-chat-app">Chat app with Deno and Preact</a>. Since then, many doubts have arisen. Mostly of them are about how to do the same thing we did in Node, but with the new Deno ecosystem.</p>\n<p>I\'ve tried to collect some of the most used topics in Node, and looked for their alternative with Deno. First of all, I would like to make it clear that we can use many of the current Node.js modules. There is no need to look for an alternative for everything, as many modules are reusable. You can visit <a href="https://www.pika.dev/about">pika.dev</a> to look for modules to use in Deno. That said, let\'s start with the list:</p>\n<p><strong>We will cover the following:</strong></p>\n<ul>\n<li><a href="#from-node-to-deno">From Node to Deno</a>\n<ul>\n<li><a href="#electron">Electron</a></li>\n<li><a href="#forever--pm2">Forever / PM2</a></li>\n<li><a href="#express--koa">Express / Koa</a>\n<ul>\n<li><a href="#http-std-lib">Http (std lib)</a></li>\n<li><a href="#oak-third-party-lib">Oak (Third party lib)</a></li>\n<li><a href="#abc-third-party-lib">Abc (Third party lib)</a></li>\n<li><a href="#deno-express-third-party-lib">Deno-express (Third party lib)</a></li>\n</ul>\n</li>\n<li><a href="#mongodb">MongoDB</a></li>\n<li><a href="#postgressql">PostgresSQL</a></li>\n<li><a href="#mysql--mariadb">MySQL / MariaDB</a></li>\n<li><a href="#redis">Redis</a></li>\n<li><a href="#nodemon">Nodemon</a></li>\n<li><a href="#jest-jasmine-ava">Jest, Jasmine, Ava...</a></li>\n<li><a href="#webpack-parcel-rollup">Webpack, Parcel, Rollup...</a></li>\n<li><a href="#prettier">Prettier</a></li>\n<li><a href="#npm-scripts">NPM Scripts</a></li>\n<li><a href="#nvm">Nvm</a></li>\n<li><a href="#npx">Npx</a></li>\n<li><a href="#run-on-a-docker">Run on a Docker</a></li>\n<li><a href="#run-as-a-lambda">Run as a lambda</a></li>\n<li><a href="#conclusion">Conclusion</a></li>\n</ul>\n</li>\n</ul>\n<h2 id="electron">Electron<a class="anchor" href="#electron">§</a></h2>\n<p>With Node.js we can create desktop applications using <a href="https://github.com/electron/electron">Electron</a>. Electron uses Chromium as interface to run a web environment. But, can we use Electron with Deno? Are there alternatives?</p>\n<p><img src="https://aralroca.com/images/blog-images/55.png" alt=""></p>\n<p>Well, right now Electron is far from being able to be executed under Deno. We must look for alternatives. Since Deno is made with Rust, we can use <a href="https://github.com/Boscop/web-view">web-view rust bindings</a> to run Destkop application in Deno.</p>\n<p>This way, we can use the native OS webview to run as many webviews as we want.</p>\n<p><strong>Repo</strong>: <a href="https://github.com/eliassjogreen/deno_webview">https://github.com/eliassjogreen/deno_webview</a></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">WebView</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/webview/mod.ts">https://deno.land/x/webview/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> sharedOptions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  width<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>\n  height<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  resizable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  debug<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  frameless<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> webview1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">"Multiple deno_webview example"</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data:text/html,\n    &lt;html>\n    &lt;body>\n      &lt;h1>1&lt;/h1>\n    &lt;/body>\n    &lt;/html>\n    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token spread operator">...</span>sharedOptions<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> webview2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebView</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">"Multiple deno_webview example"</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data:text/html,\n    &lt;html>\n    &lt;body>\n      &lt;h1>2&lt;/h1>\n    &lt;/body>\n    &lt;/html>\n    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token spread operator">...</span>sharedOptions<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">await</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>webview1<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> webview2<span class="token punctuation">.</span><span class="token method function property-access">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p><img src="https://aralroca.com/images/blog-images/40.jpg" alt=""></p>\n<h2 id="forever--pm2">Forever / PM2<a class="anchor" href="#forever--pm2">§</a></h2>\n<p><a href="https://github.com/foreversd/forever">Forever</a> and <a href="https://github.com/Unitech/pm2">PM2</a> are CLI tools for ensuring that a given script runs continuously as a daemon. Unlike Forever, PM2 is more complete and also serves as load balancer. Both are very useful in Node, but can we use them in Deno?</p>\n<p>Forever is intended for Node only, so using it is not feasible. On the other hand, with PM2 we can run non-node scripts, so we could still use it for Deno.</p>\n<p><img src="https://aralroca.com/images/blog-images/56.png" alt=""></p>\n<p>Creating an <code>app.sh</code> file</p>\n<pre class="language-autoit"><code class="language-autoit">#!<span class="token operator">/</span>bin<span class="token operator">/</span>bash\ndeno run <span class="token operator">-</span>A myCode<span class="token punctuation">.</span>ts\n</code></pre>\n<p>And</p>\n<pre class="language-autoit"><code class="language-autoit">➜ pm2 start <span class="token punctuation">.</span><span class="token operator">/</span>app<span class="token punctuation">.</span>sh \n</code></pre>\n<p><img src="https://aralroca.com/images/blog-images/41.png" alt=""></p>\n<h2 id="express--koa">Express / Koa<a class="anchor" href="#express--koa">§</a></h2>\n<p><a href="https://github.com/expressjs/express">Express</a> and <a href="https://github.com/koajs/koa">Koa</a> are the best known Node frameworks. They\'re known for their robust routing system and their HTTP helpers (redirection, caching, etc). Can we use them in Deno? The answer is not... But there are some alternatives.</p>\n<p><img src="https://aralroca.com/images/blog-images/42.png" alt=""></p>\n<h3 id="http-std-lib">Http (std lib)<a class="anchor" href="#http-std-lib">§</a></h3>\n<p>Deno\'s own STD library already covers many of the needs provided by Express or Koa. <a href="https://deno.land/std/http/">https://deno.land/std/http/</a>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">ServerRequest</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/std/http/server.ts">https://deno.land/std/http/server.ts</a>"</span><span class="token punctuation">;</span>\n<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getCookies <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/std/http/cookie.ts">https://deno.land/std/http/cookie.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrequest<span class="token punctuation">.</span><span class="token property-access">headers</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrequest<span class="token punctuation">.</span><span class="token property-access">headers</span><span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> <span class="token string">"full=of; tasty=chocolate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cookies <span class="token operator">=</span> <span class="token function">getCookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"cookies:"</span><span class="token punctuation">,</span> cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>However, the way to declare routes is not very attractive. So let\'s look at some more alternatives.</p>\n<h3 id="oak-third-party-lib">Oak (Third party lib)<a class="anchor" href="#oak-third-party-lib">§</a></h3>\n<p>One of the most elegant solutions right now, very inspired by Koa. <a href="https://github.com/oakserver/oak">https://github.com/oakserver/oak</a></p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Application</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/oak/mod.ts">https://deno.land/x/oak/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  ctx<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword control-flow">await</span> app<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="abc-third-party-lib">Abc (Third party lib)<a class="anchor" href="#abc-third-party-lib">§</a></h3>\n<p>Similar to Oak. <a href="https://deno.land/x/abc">https://deno.land/x/abc</a>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Application</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/abc/mod.ts">https://deno.land/x/abc/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">static</span><span class="token punctuation">(</span><span class="token string">"/static"</span><span class="token punctuation">,</span> <span class="token string">"assets"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token string">"Hello!"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token method function property-access">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span> port<span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3 id="deno-express-third-party-lib">Deno-express (Third party lib)<a class="anchor" href="#deno-express-third-party-lib">§</a></h3>\n<p>Maybe the most similar alternative to Express Framework. <a href="https://github.com/NMathar/deno-express">https://github.com/NMathar/deno-express</a>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> exp</span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://raw.githubusercontent.com/NMathar/deno-express/master/mod.ts">https://raw.githubusercontent.com/NMathar/deno-express/master/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">exp<span class="token punctuation">.</span>App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token method function property-access">static_</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>exp<span class="token punctuation">.</span><span class="token property-access">bodyParser</span><span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/api/todos"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">await</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"Buy some milk"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword control-flow">await</span> app<span class="token punctuation">.</span><span class="token method function property-access">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">app listening on port </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>server<span class="token punctuation">.</span><span class="token property-access">port</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="mongodb">MongoDB<a class="anchor" href="#mongodb">§</a></h2>\n<p><a href="https://github.com/mongodb/mongo">MongoDB</a> is a document database with a huge scability and flexibility. In the JavaScript ecosystem has been widely used, with many stacks like MEAN or MERN that use it. It\'s very popular.</p>\n<p><img src="https://aralroca.com/images/blog-images/43.png" alt=""></p>\n<p>So yes, we can use MongoDB with Deno. To do this, we can use this driver: <a href="https://github.com/manyuanrong/deno_mongo">https://github.com/manyuanrong/deno_mongo</a>.</p>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> init<span class="token punctuation">,</span> <span class="token maybe-class-name">MongoClient</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/mongo@v0.6.0/mod.ts">https://deno.land/x/mongo@v0.6.0/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Initialize the plugin</span>\n<span class="token keyword control-flow">await</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nclient<span class="token punctuation">.</span><span class="token method function property-access">connectWithUri</span><span class="token punctuation">(</span><span class="token string">"<a class="token url-link" href="mongodb://localhost:27017">mongodb://localhost:27017</a>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token method function property-access">database</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> users <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token method function property-access">collection</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// insert</span>\n<span class="token keyword">const</span> insertId <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">insertOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  username<span class="token operator">:</span> <span class="token string">"user1"</span><span class="token punctuation">,</span>\n  password<span class="token operator">:</span> <span class="token string">"pass1"</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// findOne</span>\n<span class="token keyword">const</span> user1 <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token operator">:</span> insertId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// find</span>\n<span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token punctuation">{</span> $ne<span class="token operator">:</span> <span class="token keyword null nil">null</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// aggregation</span>\n<span class="token keyword">const</span> docs <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">aggregation</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> $match<span class="token operator">:</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">"many"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> $group<span class="token operator">:</span> <span class="token punctuation">{</span> _id<span class="token operator">:</span> <span class="token string">"$username"</span><span class="token punctuation">,</span> total<span class="token operator">:</span> <span class="token punctuation">{</span> $sum<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// updateOne</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> matchedCount<span class="token punctuation">,</span> modifiedCount<span class="token punctuation">,</span> upsertedId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">updateOne</span><span class="token punctuation">(</span>\n  username<span class="token operator">:</span> <span class="token punctuation">{</span> $ne<span class="token operator">:</span> <span class="token keyword null nil">null</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> $set<span class="token operator">:</span> <span class="token punctuation">{</span> username<span class="token operator">:</span> <span class="token string">"USERNAME"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// deleteOne</span>\n<span class="token keyword">const</span> deleteCount <span class="token operator">=</span> <span class="token keyword control-flow">await</span> users<span class="token punctuation">.</span><span class="token method function property-access">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token operator">:</span> insertId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="postgressql">PostgresSQL<a class="anchor" href="#postgressql">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/44.png" alt=""></p>\n<p>Like MongoDB, there is also a driver for <a href="https://github.com/postgres/postgres/">PostgresSQL</a>.</p>\n<ul>\n<li><a href="https://github.com/buildondata/deno-postgres">https://github.com/buildondata/deno-postgres</a>.</li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Client</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/postgres/mod.ts">https://deno.land/x/postgres/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  user<span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>\n  database<span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>\n  hostname<span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>\n  port<span class="token operator">:</span> <span class="token number">5432</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword control-flow">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM people;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token property-access">rows</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword control-flow">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="mysql--mariadb">MySQL / MariaDB<a class="anchor" href="#mysql--mariadb">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/45.png" alt=""></p>\n<p>As with MongoDB and PostgresSQL, there is also a driver for <a href="https://github.com/mysqljs/mysql">MySQL</a> / <a href="https://github.com/mariadb-corporation/mariadb-connector-nodejs">MariaDB</a>.</p>\n<ul>\n<li><a href="https://github.com/manyuanrong/deno_mysql">https://github.com/manyuanrong/deno_mysql</a></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Client</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/mysql/mod.ts">https://deno.land/x/mysql/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hostname<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>\n  username<span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>\n  db<span class="token operator">:</span> <span class="token string">"dbname"</span><span class="token punctuation">,</span>\n  poolSize<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// connection limit</span>\n  password<span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword control-flow">await</span> client<span class="token punctuation">.</span><span class="token method function property-access">execute</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">INSERT INTO users(name) values(?)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token string">"aralroca"</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// { affectedRows: 1, lastInsertId: 1 }</span>\n</code></pre>\n<h2 id="redis">Redis<a class="anchor" href="#redis">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/46.png" alt=""></p>\n<p><a href="https://github.com/NodeRedis/node-redis">Redis</a>, the best known database for caching, has also a driver for Deno.</p>\n<ul>\n<li><a href="https://github.com/keroxp/deno-redis">https://github.com/keroxp/deno-redis</a></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> connect <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"<a class="token url-link" href="https://denopkg.com/keroxp/deno-redis/mod.ts">https://denopkg.com/keroxp/deno-redis/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  hostname<span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>\n  port<span class="token operator">:</span> <span class="token number">6379</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ok <span class="token operator">=</span> <span class="token keyword control-flow">await</span> redis<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">,</span> <span class="token string">"this is an example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token keyword control-flow">await</span> redis<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="nodemon">Nodemon<a class="anchor" href="#nodemon">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/47.png" alt=""></p>\n<p><a href="https://github.com/remy/nodemon">Nodemon</a> is used in development environment to monitor any changes in your files, automatically restarting the server. This makes node development much more enjoyable, without having to manually stop and restart the server to see the applied changes. Can it be used in Deno?</p>\n<p>Sorry, but you can\'t... but still, there is an alternative: Denon.</p>\n<ul>\n<li><a href="https://github.com/eliassjogreen/denon">https://github.com/eliassjogreen/denon</a></li>\n</ul>\n<p>We can use Denon as we use <code>deno run</code> to execute scripts.</p>\n<pre class="language-autoit"><code class="language-autoit">➜ denon server<span class="token punctuation">.</span>ts\n</code></pre>\n<h2 id="jest-jasmine-ava">Jest, Jasmine, Ava...<a class="anchor" href="#jest-jasmine-ava">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/48.png" alt=""></p>\n<p>In the Node.js ecosystem there are a lot of alternatives for test runners. However, there isn\'t one official way to test the Node.js code.</p>\n<p>In Deno, there is an official way, you can use the testing std library.</p>\n<ul>\n<li><a href="https://deno.land/std/testing">https://deno.land/std/testing</a></li>\n</ul>\n<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> assertStrictEq <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/std/testing/asserts.ts">https://deno.land/std/testing/asserts.ts</a>\'</span>\n\n<span class="token maybe-class-name">Deno</span><span class="token punctuation">.</span><span class="token method function property-access">test</span><span class="token punctuation">(</span><span class="token string">\'My first test\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">assertStrictEq</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>To run the tests:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  deno test\n</code></pre>\n<h2 id="webpack-parcel-rollup">Webpack, Parcel, Rollup...<a class="anchor" href="#webpack-parcel-rollup">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/52.png" alt=""></p>\n<p>One of the strengths of Deno is that we can use ESmodules with TypeScript without the need for a bundler such as <a href="https://github.com/webpack/webpack">Webpack</a>, <a href="https://github.com/parcel-bundler/parcel">Parcel</a> or <a href="https://github.com/rollup/rollup">Rollup</a>.</p>\n<p>However, probably you wonder if given a tree of files, we can make a bundle to put everything in one file to run it on the web.</p>\n<p>Well, it\'s possible, yes. We can do it with Deno\'s CLI. Thus, there\'s no need for a third-party bundler.</p>\n<pre class="language-autoit"><code class="language-autoit">➜ deno bundle myLib<span class="token punctuation">.</span>ts myLib<span class="token punctuation">.</span>bundle<span class="token punctuation">.</span>js\n</code></pre>\n<p>Now it\'s ready to be loaded in the browser:</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> myLib</span> <span class="token keyword module">from</span> <span class="token string">"myLib.bundle.js"</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n<h2 id="prettier">Prettier<a class="anchor" href="#prettier">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/49.png" alt=""></p>\n<p>In the last few years <a href="https://prettier.io/">Prettier</a> has become quite well known within the JavaScript ecosystem because with it you don\'t have to worry about formatting the files.</p>\n<p>And the truth is, it can still be used on Deno but it loses its meaning, because Deno has its own formatter.</p>\n<p>You can format your files using this command:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  deno fmt\n</code></pre>\n<h2 id="npm-scripts">NPM Scripts<a class="anchor" href="#npm-scripts">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/50.png" alt=""></p>\n<p>With Deno, the <code>package.json</code> no longer exists. One of the things I really miss are the scripts that were declared in the <code>package.json</code>.</p>\n<p>A simple solution would be to use a <code>makefile</code> and execute it with <code>make</code>. However, if you miss the npm syntax, there is an npm-style script runner for Deno:</p>\n<ul>\n<li><a href="https://github.com/umbopepato/velociraptor">https://github.com/umbopepato/velociraptor</a></li>\n</ul>\n<p>You can define a file with your scripts:</p>\n<pre class="language-yaml"><code class="language-yaml"><span class="token comment"># scripts.yaml</span>\n<span class="token key atrule">scripts</span><span class="token punctuation">:</span>\n  <span class="token key atrule">start</span><span class="token punctuation">:</span> deno run <span class="token punctuation">-</span><span class="token punctuation">-</span>allow<span class="token punctuation">-</span>net server.ts\n  <span class="token key atrule">test</span><span class="token punctuation">:</span> deno test <span class="token punctuation">-</span><span class="token punctuation">-</span>allow<span class="token punctuation">-</span>net server_test.ts\n</code></pre>\n<p>Execute with:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  vr run <span class="token operator">&lt;</span>SCRIPT<span class="token operator">></span>\n</code></pre>\n<p>Another alternative is <a href="https://github.com/BentoumiTech/denox">denox</a>, very similar to Velociraptor.</p>\n<h2 id="nvm">Nvm<a class="anchor" href="#nvm">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/51.png" alt=""></p>\n<p><a href="https://github.com/nvm-sh/nvm">Nvm</a> is a CLI to manage multiple active Node versions, to easy upgrade or downgrade versions depending on your projects.</p>\n<p>A <code>nvm</code> equivalent in Deno is <code>dvm</code>.</p>\n<ul>\n<li><a href="https://github.com/axetroy/dvm">https://github.com/axetroy/dvm</a></li>\n</ul>\n<pre class="language-autoit"><code class="language-autoit">➜  dvm use <span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">0</span>\n</code></pre>\n<h2 id="npx">Npx<a class="anchor" href="#npx">§</a></h2>\n<p><a href="https://github.com/npm/npx">Npx</a> in recent years has become very popular to execute npm packages without having to install them. Now many projects won\'t exist within npm because Deno is a separate ecosystem. So, how can we execute Deno modules without having to install them with <code>deno install https://url-of-module.ts</code>?</p>\n<p>In the same way that we run our project, instead of a file we put the URL of the module:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  deno run https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>deno<span class="token punctuation">.</span>land<span class="token operator">/</span>std<span class="token operator">/</span>examples<span class="token operator">/</span>welcome<span class="token punctuation">.</span>ts\n</code></pre>\n<p>As you can see, not only we have to remember the name of the module, but the whole URL, which makes it a little more difficult to use. On the other hand it gives a lot more flexibility as we can run any file, not just what\'s specified as a binary in the <code>package.json</code> like <code>npx</code>.</p>\n<h2 id="run-on-a-docker">Run on a Docker<a class="anchor" href="#run-on-a-docker">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/53.png" alt=""></p>\n<p>To run Deno inside a Docker, we can create this Dockerfile:</p>\n<pre class="language-dockerfile"><code class="language-dockerfile"><span class="token keyword">FROM</span> hayd/alpine<span class="token punctuation">-</span>deno<span class="token punctuation">:</span>1.0.0\n\n<span class="token keyword">EXPOSE</span> 1993  <span class="token comment"># Port.</span>\n\n<span class="token keyword">WORKDIR</span> /app\n\n<span class="token keyword">USER</span> deno\n\n<span class="token keyword">COPY</span> deps.ts .\n<span class="token keyword">RUN</span> deno cache deps.ts <span class="token comment"># Cache the deps</span>\n\n<span class="token keyword">ADD</span> . .\n<span class="token keyword">RUN</span> deno cache main.ts <span class="token comment"># main entrypoint.</span>\n\n<span class="token keyword">CMD</span> <span class="token punctuation">[</span><span class="token string">"--allow-net"</span><span class="token punctuation">,</span> <span class="token string">"main.ts"</span><span class="token punctuation">]</span>\n</code></pre>\n<p>To build + run it:</p>\n<pre class="language-autoit"><code class="language-autoit">➜  docker build <span class="token operator">-</span>t app <span class="token punctuation">.</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> docker run <span class="token operator">-</span>it <span class="token operator">-</span><span class="token operator">-</span>init <span class="token operator">-</span>p <span class="token number">1993</span><span class="token punctuation">:</span><span class="token number">1993</span> app\n</code></pre>\n<p>Repo: <a href="https://github.com/hayd/deno-docker">https://github.com/hayd/deno-docker</a></p>\n<h2 id="run-as-a-lambda">Run as a lambda<a class="anchor" href="#run-as-a-lambda">§</a></h2>\n<p><img src="https://aralroca.com/images/blog-images/54.png" alt=""></p>\n<p>To use Deno as a lambda, there is a module in Deno STD library. <a href="https://deno.land/x/lambda">https://deno.land/x/lambda</a>.</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span>\n  APIGatewayProxyEvent<span class="token punctuation">,</span>\n  APIGatewayProxyResult<span class="token punctuation">,</span>\n  Context\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"<a class="token url-link" href="https://deno.land/x/lambda/mod.ts">https://deno.land/x/lambda/mod.ts</a>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>\n  event<span class="token operator">:</span> APIGatewayProxyEvent<span class="token punctuation">,</span>\n  context<span class="token operator">:</span> Context\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>APIGatewayProxyResult<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    body<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Welcome to deno </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Deno<span class="token punctuation">.</span>version<span class="token punctuation">.</span>deno<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 🦕</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"text/html;charset=utf8"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    statusCode<span class="token operator">:</span> <span class="token number">200</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>Interesting references:</p>\n<ul>\n<li>Deno in Vercel: <a href="https://github.com/lucacasonato/now-deno">https://github.com/lucacasonato/now-deno</a></li>\n<li>Deno in AWS: <a href="https://blog.begin.com/deno-runtime-support-for-architect-805fcbaa82c3">https://blog.begin.com/deno-runtime-support-for-architect-805fcbaa82c3</a></li>\n</ul>\n<h2 id="conclusion">Conclusion<a class="anchor" href="#conclusion">§</a></h2>\n<p>I\'m sure I forgot some Node topics and their Deno alternative, let me know if there\'s anything I missed that you\'d like me to explain. I hope this article helps you break the ice with Deno.</p>\n<p>To explore all libraries you can use with Deno:</p>\n<ul>\n<li><a href="https://deno.land/std">https://deno.land/std</a></li>\n<li><a href="https://deno.land/x">https://deno.land/x</a></li>\n<li><a href="https://www.pika.dev/">https://www.pika.dev/</a></li>\n</ul>'
        } }),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#electron">Electron</a></li><li><a href="#forever--pm2">Forever / PM2</a></li><li><a href="#express--koa">Express / Koa</a><ol><li><a href="#http-std-lib">Http (std lib)</a></li><li><a href="#oak-third-party-lib">Oak (Third party lib)</a></li><li><a href="#abc-third-party-lib">Abc (Third party lib)</a></li><li><a href="#deno-express-third-party-lib">Deno-express (Third party lib)</a></li></ol></li><li><a href="#mongodb">MongoDB</a></li><li><a href="#postgressql">PostgresSQL</a></li><li><a href="#mysql--mariadb">MySQL / MariaDB</a></li><li><a href="#redis">Redis</a></li><li><a href="#nodemon">Nodemon</a></li><li><a href="#jest-jasmine-ava">Jest, Jasmine, Ava...</a></li><li><a href="#webpack-parcel-rollup">Webpack, Parcel, Rollup...</a></li><li><a href="#prettier">Prettier</a></li><li><a href="#npm-scripts">NPM Scripts</a></li><li><a href="#nvm">Nvm</a></li><li><a href="#npx">Npx</a></li><li><a href="#run-on-a-docker">Run on a Docker</a></li><li><a href="#run-as-a-lambda">Run as a lambda</a></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>'
        } }),
    'author': "hylerrix",
    'contributors': [
        "hylerrix"
    ],
    'date': "2021-02-22T04:11:42.000Z",
    'updated': null,
    'excerpt': "Last week I published an article about Deno, and how to create a Chat app with Deno and Preact. Since then, many doubts have arisen. Mostly of them are about how to do the same thing we did in Node, but with th...",
    'cover': "https://aralroca.com/images/blog-images/55.png",
    'created': "05/17/2020",
    'description': "Learn how to use Node ecosystem in Deno.",
    'tags': "node, deno, javascript",
    'cover_image': "/images/cover-images/10_cover_image.jpg",
    'cover_image_mobile': "/images/cover-images/10_cover_image_mobile.jpg",
    'cover_image_vert': "/images/cover-images/10_cover_image_vert.jpg",
    'cover_color': "#353133",
    'sidebar': [
        {
            "text": "Deno 钻研之术",
            "link": "articles/index.html",
            "pagePath": "articles/README.md"
        },
        {
            "link": "articles/document/index.html",
            "title": "文档篇",
            "children": [
                {
                    "text": "Deno 版本历史概览",
                    "link": "articles/document/deno-version-handbook.html",
                    "pagePath": "articles/document/deno-version-handbook.md"
                },
                {
                    "text": "Deno CLI 通用手册",
                    "link": "articles/document/deno-cli-handbook.html",
                    "pagePath": "articles/document/deno-cli-handbook.md"
                },
                {
                    "text": "Deno 专业术语翻译手册",
                    "link": "articles/document/deno-translation-dictionary.html",
                    "pagePath": "articles/document/deno-translation-dictionary.md"
                }
            ],
            "pagePath": "articles/document/README.md",
            "text": "文档篇"
        },
        {
            "link": "articles/basic/index.html",
            "title": "基础篇",
            "children": [
                {
                    "text": "Hello，从多样化安装到简单实战",
                    "link": "articles/basic/install-and-hello-world.html",
                    "pagePath": "articles/basic/install-and-hello-world.md"
                }
            ],
            "pagePath": "articles/basic/README.md",
            "text": "基础篇"
        },
        {
            "link": "articles/architecture/index.html",
            "title": "架构篇",
            "children": [
                {
                    "link": "articles/architecture/cli/index.html",
                    "title": "探索 CLI",
                    "children": [
                        {
                            "text": "从 CLI 指令通读 Deno v1.x 全特性",
                            "link": "articles/architecture/cli/deno-cli-v1-function.html",
                            "pagePath": "articles/architecture/cli/deno-cli-v1-function.md"
                        }
                    ],
                    "pagePath": "articles/architecture/cli/README.md",
                    "text": "CLI 篇"
                }
            ],
            "pagePath": "articles/architecture/README.md",
            "text": "架构篇"
        },
        {
            "link": "articles/ecology/index.html",
            "title": "生态篇",
            "children": [
                {
                    "text": "Awesome Deno 中文资源全图谱",
                    "link": "articles/ecology/awesome-deno-cn.html",
                    "pagePath": "articles/ecology/awesome-deno-cn.md"
                }
            ],
            "pagePath": "articles/ecology/README.md",
            "text": "生态篇"
        },
        {
            "link": "articles/node/index.html",
            "title": "Node 篇",
            "children": [
                {
                    "text": "深入浅出 Create React App",
                    "link": "articles/node/create-react-app-intro.html",
                    "pagePath": "articles/node/create-react-app-intro.md"
                },
                {
                    "text": "欲取代绝大多 JavaScript 工具链？Rome 尝鲜",
                    "link": "articles/node/javascript-toolchain-rome.html",
                    "pagePath": "articles/node/javascript-toolchain-rome.md"
                }
            ],
            "pagePath": "articles/node/README.md",
            "text": "Node 篇"
        },
        {
            "link": "articles/official/index.html",
            "title": "官方篇",
            "children": [
                {
                    "text": "精读《Deno 2020 官方回顾及 2021 展望》",
                    "link": "articles/official/thoroughgoing-deno-in-2020.html",
                    "pagePath": "articles/official/thoroughgoing-deno-in-2020.md"
                }
            ],
            "pagePath": "articles/official/README.md",
            "text": "官方篇"
        },
        {
            "link": "articles/translation/index.html",
            "title": "翻译篇",
            "children": [
                {
                    "text": "Deno 入门手册：附大量 TypeScript 代码实例",
                    "link": "articles/translation/the-deno-handbook.html",
                    "pagePath": "articles/translation/the-deno-handbook.md"
                },
                {
                    "text": "Deno + WebSockets 打造聊天室应用",
                    "link": "articles/translation/deno-chat-app.html",
                    "pagePath": "articles/translation/deno-chat-app.md"
                },
                {
                    "text": "从 Node 到 Deno：探索各大主流库替代方案",
                    "link": "articles/translation/from-node-to-deno.html",
                    "pagePath": "articles/translation/from-node-to-deno.md"
                },
                {
                    "text": "Deno + Oak 构建酷炫的 Todo API",
                    "link": "articles/translation/deno-oak-todo-api.html",
                    "pagePath": "articles/translation/deno-oak-todo-api.md"
                },
                {
                    "text": "Deno + Oak 连接 MySQL 实战教程",
                    "link": "articles/translation/deno-oak-mysql.html",
                    "pagePath": "articles/translation/deno-oak-mysql.md"
                },
                {
                    "text": "为什么我认为 Deno 是一个迈向错误方向的 JavaScript 运行时？",
                    "link": "articles/translation/why-deno-wrong.html",
                    "pagePath": "articles/translation/why-deno-wrong.md"
                }
            ],
            "pagePath": "articles/translation/README.md",
            "text": "翻译篇"
        },
        {
            "text": "感谢",
            "link": "articles/THANKS.html",
            "pagePath": "articles/THANKS.md"
        }
    ],
    'gitalk': React.createElement(Gitalk, { admin: [
            'hylerrix'
        ], clientID: "60180eea2c09238f8998", clientSecret: "e9ea0ff6555185eda28eff4dfd4b755b1764abf3", id: "articles/translation/original-articles/from-node-to-deno.html", owner: "hylerrix", pagerDirection: "first", repo: "deno-tutorial", title: "From Node to Deno" })
};
