import projectConfig from '/pagic.config.js';
import Ga from '/_ga.js';
import Gitalk from '/_gitalk.js';
export default {
    'prev': {
        "text": "为什么 Deno 没有众望所归？超越 Node.js 还要做些什么？",
        "link": "articles/translation/why-deno-flopped.html"
    },
    'next': {
        "text": "如何在 Deno 下使用 AlpehJS 库构建 React 应用",
        "link": "articles/translation/deno-alpeh-react.html"
    },
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "articles/translation/deno-url-shortener.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "articles/translation/deno-url-shortener.html",
    'title': "如何在 Deno 中构建一个 URL 短链生成器",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>如何在 Deno 中构建一个 URL 短链生成器</h1>\n<blockquote>\n<ul>\n<li>原文地址：<a href="https://www.freecodecamp.org/news/build-a-url-shortener-in-deno/">How to Build a URL Shortener in Deno</a></li>\n<li>原文作者：Akash Joshi</li>\n<li>原文发布时间/翻译时间：20201007/20210429</li>\n<li>译者：<a href="https://github.com/hylerrix">hylerrix</a></li>\n<li>备注：本文遵循 <a href="https://github.com/freeCodeCamp/news-translation">freeCodeCamp 翻译规范</a>，同时本文会收录在<a href="https://github.com/hylerrix/deno-tutorial">《Deno 钻研之术》</a>的翻译篇中。</li>\n</ul>\n</blockquote>\n<p><img src="https://cdn.nlark.com/yuque/0/2021/png/86548/1619653066161-316f1fd4-408a-41db-89bb-5ed381463e71.png#height=853&amp;id=YbFIR&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=853&amp;originWidth=1280&amp;originalType=binary&amp;size=2873338&amp;status=done&amp;style=none&amp;width=1280" alt=""></p>\n<p>在本文中，我们将要学习 Deno 的基础，比如如何运行一个程序并且拥抱 Deno 的安全特性。</p>\n<p>Deno 是用 Rust 编写的一个全新 JavaScript 和 TypeScript 运行时。它提供了严格的安全性、开箱即用的 TypeScript、一个单个可运行的执行文件，以及一组经过代码审查的标准模块。</p>\n<p>像 Node.js 下的 npm 一样，Deno 的生态库被管理在 <a href="https://deno.land/x/">X</a> 中心库下。我们将使用其中的一个库——Oak，在 Deno 中构建基于 REST API 的服务器。</p>\n<p>通过使用类似 Express 的路由管理库 <a href="https://deno.land/x/oak@v6.3.0">Oak</a> 的基础知识后，我们将深入探讨 Deno 并构建一个完整的应用程序。</p>\n<p>这是我们将构建此应用程序的步骤：</p>\n<ol>\n<li>使用基于 JSON 的配置文件来将 URL 短链映射到端口上</li>\n<li>在每个 URL 上附加有效期，以便这些重定向仅在有效的时间内生效。</li>\n</ol>\n<h2 id="0-%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87">0. 前置准备<a class="anchor" href="#0-%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87">§</a></h2>\n<ol>\n<li>从<a href="https://deno.land/#installation">这个链接</a>中安装 Deno。</li>\n<li>确保你知道一些 JavaScript 基础。</li>\n</ol>\n<p>尽管并不是本文所需，但你还是可以通过以下视频的形式看看 Deno 的基础介绍。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2021/png/86548/1619653037810-e50e2564-bf72-4c05-8325-8b177a87977b.png#height=343&amp;id=D9d0G&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=343&amp;originWidth=662&amp;originalType=binary&amp;size=89785&amp;status=done&amp;style=none&amp;width=662" alt=""></p>\n<p><a href="https://www.youtube.com/watch?v=VQ8Jb7GLHgk">一个 Deno 入手的视频教程</a>。</p>\n<p>那么，让我们来正式开始？</p>\n<h2 id="1-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%B7%AF%E7%94%B1">1. 如何构建路由<a class="anchor" href="#1-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%B7%AF%E7%94%B1">§</a></h2>\n<p>要为我们的应用编写服务端代码，我们将使用 Oak 模块。它具有类似于 Express 定义 API 路由的语法。</p>\n<p>如果我们在<a href="https://deno.land/x/oak">这个文档</a>中，“<a href="https://deno.land/x/oak">基础用法</a>”部分几乎涵盖了我们会在本文中用到的一切路由。因此，我们直接拓展这段代码来构建我们的应用。</p>\n<p>要直接用到这段代码，可以在文件夹中创建一个名为 index.ts 的文件，然后将“基本用法”里的代码复制到其中。</p>\n<p>要了解如何在 Deno 中运行 TypeScript 或 JavaScript 文件，你首先需要理解 Deno 是如何运行文件的。</p>\n<p>你可以通过运行 <code>deno run file_name.ts</code> 或 <code>file_name.js</code> 命令来运行文件，后面可以跟一组参数标志，这些标志将为你的应用程序提供某些系统权限。</p>\n<p>为了测试刚刚粘贴的“基础用法”代码能否跑通，使用如下命令：<code>deno run index.ts</code>。</p>\n<p>你会看到 Deno 警示你没有授予该代码访问网络的权限。所以你需要添加 <code>-allow-net</code> 到刚才的 run 命令中。该命令最终会像这样：<code>deno run index.ts -allow-net</code>。</p>\n<p>“基础用法”中的路由代码会如下所示：</p>\n<pre class="language-jsx"><code class="language-jsx">router\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span>books<span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/book/:id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token operator">&amp;&amp;</span> books<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>拆解上面的代码：首先定义了一个 <code>router</code> 对象，然后在路由器上调用 get 函数，以定义应用程序的各种端口。端口相应的逻辑在回调函数中定义。</p>\n<p>例如，对于 &quot;/&quot; 端口，已定义了在响应体重返回 “Hello World” 的回调函数。我们可以先保持此端口不变，以通过接收响应来测试我们的应用程序服务器是否正在运行。</p>\n<p>我们不需要已定义的 “/book” URL，因此可以安全地删除其定义。此时，你的路由应具有如下结构：</p>\n<pre class="language-typescript"><code class="language-typescript">router\n  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/book/:id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>params <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> books<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>在下一节中，我们将着手于开始实战构建应用程序。</p>\n<h2 id="2-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA-url-%E7%9F%AD%E9%93%BE%E5%99%A8">2. 如何构建 URL 短链器<a class="anchor" href="#2-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA-url-%E7%9F%AD%E9%93%BE%E5%99%A8">§</a></h2>\n<p>现在让我们开始实战构建 URL 短链生成器。</p>\n<p>它应该根据 <code>shortcode</code> 来重定向到目的地（<code>dest</code>）。重定向还应仅在有效期到期之前有效，可以以年-月-日格式提供。</p>\n<p>基于这些假设，让我们创建一个名为 <code>urls.json</code> 的配置文件。该文件的格式为：</p>\n<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"shortcode"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"dest"</span><span class="token operator">:</span> <span class="token string">"destination_url_string"</span><span class="token punctuation">,</span>\n    <span class="token property">"expiryDate"</span><span class="token operator">:</span> <span class="token string">"YYYY-MM-DD"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>你可以<a href="https://github.com/akash-joshi/deno-url-shortener/blob/master/urls.json">参考这个 JSON 文件</a>。</p>\n<p>要在你的代码中读取这个 JSON 文件，请在 <code>index.ts</code> 顶部添加以下内容：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Application</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Router</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"&lt;<a class="token url-link" href="https://deno.land/x/oak/mod.ts">https://deno.land/x/oak/mod.ts</a>>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> urls <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token maybe-class-name">Deno</span><span class="token punctuation">.</span><span class="token method function property-access">readTextFileSync</span><span class="token punctuation">(</span><span class="token string">"./urls.json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>现在，要运行 <code>index.ts</code>，你需要另一个标志 <code>-allow-read</code>，否则 Deno 将抛出“未提供读取权限”错误。你的最终命令应该是 <code>deno run —allow-net —allow-read index.ts</code>。</p>\n<p>运行此命令后，你将在终端窗口中看到打印的 JSON 文件。这意味着你的程序能够正确读取 JSON 文件。</p>\n<p>如果我们回到上面看到的“基本用法”示例，则路由 “/book/:id” 风格正是我们接下来所需要的。</p>\n<p>将 &quot;/book/:id&quot; 替换为 &quot;/shrt/:urlid&quot;，此时我们将基于 URL ID（<code>:urlid</code>）获得各个 URL。</p>\n<p>用以下代码替换 &quot;/book/:id&quot; 路由中存在的现有代码：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/shrt/:urlid"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span> <span class="token operator">&amp;&amp;</span> urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>路由中的 <code>if</code> 条件执行以下操作：</p>\n<ol>\n<li>检查参数是否存在于路由中</li>\n<li>检查参数 <code>urlid</code> 是否在参数列表中</li>\n<li>检查 <code>urlid</code> 是否与我们 JSON 中的任何 URL 匹配。</li>\n</ol>\n<p>如果有所匹配，用户将重定向到正确的 URL。如果无所匹配，则返回 404 响应。</p>\n<p>想要测试这段代码，请将如下代码复制到 <code>index.ts</code> 中。路由现在长这个样子：</p>\n<pre class="language-jsx"><code class="language-jsx">router\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/shrt/:urlid"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span> <span class="token operator">&amp;&amp;</span> urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>接下来使用 <code>deno run —allow-net —allow-read index.ts</code> 运行文件。</p>\n<p>如果你从示例中复制了 JSON 文件，此时打开 <code>http://localhost:8000/shrt/g</code>，你会正常重定向到 Google 主页上。</p>\n<p>另一方面，如果你使用的随机 shortcode 在我们网址配置中不起作用，则会进入到 404 页面上。</p>\n<p>但是，你会看到我们的短链器不会实时响应 JSON 文件中的变更。想要增加更多的配置，请以如下相同格式向 <code>urls.json</code> 中添加新的重定向。</p>\n<pre class="language-json"><code class="language-json"><span class="token property">"shortcode"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">"dest"</span><span class="token operator">:</span> <span class="token string">"destination_url_string"</span><span class="token punctuation">,</span>\n  <span class="token property">"expiryDate"</span><span class="token operator">:</span> <span class="token string">"YYYY-MM-DD"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这是因为 <code>urls.json</code> 仅在刚开始时被读取一次。现在，我们需要将实时更新功能添加到服务端上。</p>\n<h2 id="3-%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96">3. 如何添加实时读取<a class="anchor" href="#3-%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96">§</a></h2>\n<p>为了使 <strong>urls</strong> 对象能够实时响应 JSON 文件中的更改，我们只需将 read 语句移动到路由中即可。会长这样：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/shrt/:urlid"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> urls <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token maybe-class-name">Deno</span><span class="token punctuation">.</span><span class="token method function property-access">readTextFileSync</span><span class="token punctuation">(</span><span class="token string">"./urls.json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span> <span class="token operator">&amp;&amp;</span> urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>请注意我们如何是路由内部移动 URL 对象的。此时，每次调用该路由时都会读取配置文件，因此它可以实时响应 <code>urls.json</code> 文件中所做的任何更改。即使我们现在添加或删除其他重定向，我们的代码也会做出新的响应。</p>\n<h2 id="4-%E5%A6%82%E4%BD%95%E5%90%91-url-%E4%B8%8A%E6%B7%BB%E5%8A%A0%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4">4. 如何向 URL 上添加过期时间<a class="anchor" href="#4-%E5%A6%82%E4%BD%95%E5%90%91-url-%E4%B8%8A%E6%B7%BB%E5%8A%A0%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4">§</a></h2>\n<p>为了使我们的 URL 在某个时间点上过期，我们将使用流行的 Moment.js 库，该库使处理日期变得更容器。</p>\n<p>幸运的是，它已经被<a href="https://deno.land/x/moment">良好移植到了 Deno 上</a>。要了解其工作原理，请在上一句的链接中查看其文档。</p>\n<p>要在代码中使用到，请直接通过 URL 导入：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Application</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Router</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"&lt;<a class="token url-link" href="https://deno.land/x/oak/mod.ts">https://deno.land/x/oak/mod.ts</a>>"</span><span class="token punctuation">;</span>\n<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> moment <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"&lt;<a class="token url-link" href="https://deno.land/x/moment/moment.ts">https://deno.land/x/moment/moment.ts</a>>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>为了检查 URL 什么时候过期，我们检查 urls 对象上的 expiryDate 键值。如下所示：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span> <span class="token operator">&amp;&amp;</span> urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>\n    urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">expiryDate</span> <span class="token operator">></span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"Link Expired"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n  context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在 <code>moment().format(&quot;YYYY-MM-DD&quot;)</code> 中，我们使用 moment() 来获取当前的时间。然后使用 <code>.format(&quot;YYYY-MM-DD&quot;)</code> 将其格式化为 &quot;YYYY-MM-DD&quot;（年-月-日）格式。</p>\n<p>通过将其与我们的 <strong>expiryDate</strong> 键进行比较，我们可以检查当前的 URL 是否已过期。</p>\n<p>就是这样！你已经在 Deno 中构建了功能齐全的 URL 短链器。你可以<a href="https://github.com/akash-joshi/deno-url-shortener">在这个 Github 库</a>中找打最终的代码。</p>\n<p>通过将 <code>expiryDate</code> 设置为当前日期并对 <code>urls.json</code> 和我们的代码进行其它更改可以测试更多功能。</p>\n<h2 id="%E6%88%91%E5%AF%B9-deno-%E7%9A%84%E7%9C%8B%E6%B3%95">我对 Deno 的看法<a class="anchor" href="#%E6%88%91%E5%AF%B9-deno-%E7%9A%84%E7%9C%8B%E6%B3%95">§</a></h2>\n<p>为了总结这篇文章，我将谈谈我对 deno.land 的思考。</p>\n<p>当看到一种考虑安全性并支持 TypeScript 的服务端运行时令人耳目一新，但 Deno 在应用到生产环境之前还有很长的路要走。</p>\n<p>例如，即使对于像我们刚开发的那样简单的程序，使用 TypeScript 编译也得需要约为 20 秒的时间，这非常的慢。</p>\n<p>在错误报告方面，描述错误的地方还很糟糕。比如，当在函数本身中嵌入代码以读取 <code>urls.json</code> 时，Deno 无法报告未设置 <code>-allow-read</code> 标志。相反，它只会引发内部错误，而不会在终端上打印正确的错误。</p>\n<blockquote>\n<p>译者注：现 Deno 1.9 版本已经很好地支持权限提示了，其它的也在逐步支持中。</p>\n</blockquote>\n<h2 id="%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AF%E4%BB%80%E4%B9%88">接下来是什么？<a class="anchor" href="#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AF%E4%BB%80%E4%B9%88">§</a></h2>\n<p>你可以通过构建更复杂的应用程序（比如<a href="https://css-tricks.com/build-a-chat-app-using-react-hooks-in-100-lines-of-code/">聊天应用程序</a>或 <a href="https://auth0.com/blog/building-a-wikipedia-app-using-react-hooks-and-auth0/">Wikipedia 克隆版</a>）来提高你的 Deno 或 TypeScript 的技能。</p>\n<p>你也可以浏览 deno.land 上的 Deno 文档，来更熟悉基础知识。</p>\n<p>感谢你阅读本文，祝你编程愉快！</p>\n<h2 id="%E9%87%8D%E8%A6%81%E9%93%BE%E6%8E%A5">重要链接<a class="anchor" href="#%E9%87%8D%E8%A6%81%E9%93%BE%E6%8E%A5">§</a></h2>\n<p>Deno - <a href="https://deno.land/">https://deno.land</a>\nDeno X (仓库中心) - <a href="https://deno.land/x/">https://deno.land/x/</a>\nOak (REST 框架) -  <a href="https://deno.land/x/oak">https://deno.land/x/oak</a>\nOak 基础用法 -  <a href="https://deno.land/x/oak@v6.3.1#basic-usage">https://deno.land/x/oak@v6.3.1#basic-usage</a>\n最终的 GitHub 仓库 -  <a href="https://github.com/akash-joshi/deno-url-shortener">https://github.com/akash-joshi/deno-url-shortener</a></p>\n<blockquote>\n<p>© <a href="https://github.com/hylerrix/deno-tutorial">https://github.com/hylerrix/deno-tutorial</a> 2020~2021</p>\n</blockquote>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement(Ga, { id: "UA-169223577-1" }),
        React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u5982\u4F55\u5728 Deno \u4E2D\u6784\u5EFA\u4E00\u4E2A URL \u77ED\u94FE\u751F\u6210\u5668"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<blockquote>\n<ul>\n<li>原文地址：<a href="https://www.freecodecamp.org/news/build-a-url-shortener-in-deno/">How to Build a URL Shortener in Deno</a></li>\n<li>原文作者：Akash Joshi</li>\n<li>原文发布时间/翻译时间：20201007/20210429</li>\n<li>译者：<a href="https://github.com/hylerrix">hylerrix</a></li>\n<li>备注：本文遵循 <a href="https://github.com/freeCodeCamp/news-translation">freeCodeCamp 翻译规范</a>，同时本文会收录在<a href="https://github.com/hylerrix/deno-tutorial">《Deno 钻研之术》</a>的翻译篇中。</li>\n</ul>\n</blockquote>\n<p><img src="https://cdn.nlark.com/yuque/0/2021/png/86548/1619653066161-316f1fd4-408a-41db-89bb-5ed381463e71.png#height=853&amp;id=YbFIR&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=853&amp;originWidth=1280&amp;originalType=binary&amp;size=2873338&amp;status=done&amp;style=none&amp;width=1280" alt=""></p>\n<p>在本文中，我们将要学习 Deno 的基础，比如如何运行一个程序并且拥抱 Deno 的安全特性。</p>\n<p>Deno 是用 Rust 编写的一个全新 JavaScript 和 TypeScript 运行时。它提供了严格的安全性、开箱即用的 TypeScript、一个单个可运行的执行文件，以及一组经过代码审查的标准模块。</p>\n<p>像 Node.js 下的 npm 一样，Deno 的生态库被管理在 <a href="https://deno.land/x/">X</a> 中心库下。我们将使用其中的一个库——Oak，在 Deno 中构建基于 REST API 的服务器。</p>\n<p>通过使用类似 Express 的路由管理库 <a href="https://deno.land/x/oak@v6.3.0">Oak</a> 的基础知识后，我们将深入探讨 Deno 并构建一个完整的应用程序。</p>\n<p>这是我们将构建此应用程序的步骤：</p>\n<ol>\n<li>使用基于 JSON 的配置文件来将 URL 短链映射到端口上</li>\n<li>在每个 URL 上附加有效期，以便这些重定向仅在有效的时间内生效。</li>\n</ol>\n<h2 id="0-%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87">0. 前置准备<a class="anchor" href="#0-%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87">§</a></h2>\n<ol>\n<li>从<a href="https://deno.land/#installation">这个链接</a>中安装 Deno。</li>\n<li>确保你知道一些 JavaScript 基础。</li>\n</ol>\n<p>尽管并不是本文所需，但你还是可以通过以下视频的形式看看 Deno 的基础介绍。</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2021/png/86548/1619653037810-e50e2564-bf72-4c05-8325-8b177a87977b.png#height=343&amp;id=D9d0G&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=343&amp;originWidth=662&amp;originalType=binary&amp;size=89785&amp;status=done&amp;style=none&amp;width=662" alt=""></p>\n<p><a href="https://www.youtube.com/watch?v=VQ8Jb7GLHgk">一个 Deno 入手的视频教程</a>。</p>\n<p>那么，让我们来正式开始？</p>\n<h2 id="1-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%B7%AF%E7%94%B1">1. 如何构建路由<a class="anchor" href="#1-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%B7%AF%E7%94%B1">§</a></h2>\n<p>要为我们的应用编写服务端代码，我们将使用 Oak 模块。它具有类似于 Express 定义 API 路由的语法。</p>\n<p>如果我们在<a href="https://deno.land/x/oak">这个文档</a>中，“<a href="https://deno.land/x/oak">基础用法</a>”部分几乎涵盖了我们会在本文中用到的一切路由。因此，我们直接拓展这段代码来构建我们的应用。</p>\n<p>要直接用到这段代码，可以在文件夹中创建一个名为 index.ts 的文件，然后将“基本用法”里的代码复制到其中。</p>\n<p>要了解如何在 Deno 中运行 TypeScript 或 JavaScript 文件，你首先需要理解 Deno 是如何运行文件的。</p>\n<p>你可以通过运行 <code>deno run file_name.ts</code> 或 <code>file_name.js</code> 命令来运行文件，后面可以跟一组参数标志，这些标志将为你的应用程序提供某些系统权限。</p>\n<p>为了测试刚刚粘贴的“基础用法”代码能否跑通，使用如下命令：<code>deno run index.ts</code>。</p>\n<p>你会看到 Deno 警示你没有授予该代码访问网络的权限。所以你需要添加 <code>-allow-net</code> 到刚才的 run 命令中。该命令最终会像这样：<code>deno run index.ts -allow-net</code>。</p>\n<p>“基础用法”中的路由代码会如下所示：</p>\n<pre class="language-jsx"><code class="language-jsx">router\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span>books<span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/book/:id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token operator">&amp;&amp;</span> books<span class="token punctuation">.</span><span class="token method function property-access">has</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>拆解上面的代码：首先定义了一个 <code>router</code> 对象，然后在路由器上调用 get 函数，以定义应用程序的各种端口。端口相应的逻辑在回调函数中定义。</p>\n<p>例如，对于 &quot;/&quot; 端口，已定义了在响应体重返回 “Hello World” 的回调函数。我们可以先保持此端口不变，以通过接收响应来测试我们的应用程序服务器是否正在运行。</p>\n<p>我们不需要已定义的 “/book” URL，因此可以安全地删除其定义。此时，你的路由应具有如下结构：</p>\n<pre class="language-typescript"><code class="language-typescript">router\n  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/book/:id"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>params <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span> books<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>在下一节中，我们将着手于开始实战构建应用程序。</p>\n<h2 id="2-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA-url-%E7%9F%AD%E9%93%BE%E5%99%A8">2. 如何构建 URL 短链器<a class="anchor" href="#2-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA-url-%E7%9F%AD%E9%93%BE%E5%99%A8">§</a></h2>\n<p>现在让我们开始实战构建 URL 短链生成器。</p>\n<p>它应该根据 <code>shortcode</code> 来重定向到目的地（<code>dest</code>）。重定向还应仅在有效期到期之前有效，可以以年-月-日格式提供。</p>\n<p>基于这些假设，让我们创建一个名为 <code>urls.json</code> 的配置文件。该文件的格式为：</p>\n<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"shortcode"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"dest"</span><span class="token operator">:</span> <span class="token string">"destination_url_string"</span><span class="token punctuation">,</span>\n    <span class="token property">"expiryDate"</span><span class="token operator">:</span> <span class="token string">"YYYY-MM-DD"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>你可以<a href="https://github.com/akash-joshi/deno-url-shortener/blob/master/urls.json">参考这个 JSON 文件</a>。</p>\n<p>要在你的代码中读取这个 JSON 文件，请在 <code>index.ts</code> 顶部添加以下内容：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Application</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Router</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"&lt;<a class="token url-link" href="https://deno.land/x/oak/mod.ts">https://deno.land/x/oak/mod.ts</a>>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> urls <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token maybe-class-name">Deno</span><span class="token punctuation">.</span><span class="token method function property-access">readTextFileSync</span><span class="token punctuation">(</span><span class="token string">"./urls.json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>现在，要运行 <code>index.ts</code>，你需要另一个标志 <code>-allow-read</code>，否则 Deno 将抛出“未提供读取权限”错误。你的最终命令应该是 <code>deno run —allow-net —allow-read index.ts</code>。</p>\n<p>运行此命令后，你将在终端窗口中看到打印的 JSON 文件。这意味着你的程序能够正确读取 JSON 文件。</p>\n<p>如果我们回到上面看到的“基本用法”示例，则路由 “/book/:id” 风格正是我们接下来所需要的。</p>\n<p>将 &quot;/book/:id&quot; 替换为 &quot;/shrt/:urlid&quot;，此时我们将基于 URL ID（<code>:urlid</code>）获得各个 URL。</p>\n<p>用以下代码替换 &quot;/book/:id&quot; 路由中存在的现有代码：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/shrt/:urlid"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span> <span class="token operator">&amp;&amp;</span> urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>路由中的 <code>if</code> 条件执行以下操作：</p>\n<ol>\n<li>检查参数是否存在于路由中</li>\n<li>检查参数 <code>urlid</code> 是否在参数列表中</li>\n<li>检查 <code>urlid</code> 是否与我们 JSON 中的任何 URL 匹配。</li>\n</ol>\n<p>如果有所匹配，用户将重定向到正确的 URL。如果无所匹配，则返回 404 响应。</p>\n<p>想要测试这段代码，请将如下代码复制到 <code>index.ts</code> 中。路由现在长这个样子：</p>\n<pre class="language-jsx"><code class="language-jsx">router\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/shrt/:urlid"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span> <span class="token operator">&amp;&amp;</span> urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n      context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>接下来使用 <code>deno run —allow-net —allow-read index.ts</code> 运行文件。</p>\n<p>如果你从示例中复制了 JSON 文件，此时打开 <code>http://localhost:8000/shrt/g</code>，你会正常重定向到 Google 主页上。</p>\n<p>另一方面，如果你使用的随机 shortcode 在我们网址配置中不起作用，则会进入到 404 页面上。</p>\n<p>但是，你会看到我们的短链器不会实时响应 JSON 文件中的变更。想要增加更多的配置，请以如下相同格式向 <code>urls.json</code> 中添加新的重定向。</p>\n<pre class="language-json"><code class="language-json"><span class="token property">"shortcode"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">"dest"</span><span class="token operator">:</span> <span class="token string">"destination_url_string"</span><span class="token punctuation">,</span>\n  <span class="token property">"expiryDate"</span><span class="token operator">:</span> <span class="token string">"YYYY-MM-DD"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>这是因为 <code>urls.json</code> 仅在刚开始时被读取一次。现在，我们需要将实时更新功能添加到服务端上。</p>\n<h2 id="3-%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96">3. 如何添加实时读取<a class="anchor" href="#3-%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96">§</a></h2>\n<p>为了使 <strong>urls</strong> 对象能够实时响应 JSON 文件中的更改，我们只需将 read 语句移动到路由中即可。会长这样：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">"/shrt/:urlid"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> urls <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token maybe-class-name">Deno</span><span class="token punctuation">.</span><span class="token method function property-access">readTextFileSync</span><span class="token punctuation">(</span><span class="token string">"./urls.json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span> <span class="token operator">&amp;&amp;</span> urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>请注意我们如何是路由内部移动 URL 对象的。此时，每次调用该路由时都会读取配置文件，因此它可以实时响应 <code>urls.json</code> 文件中所做的任何更改。即使我们现在添加或删除其他重定向，我们的代码也会做出新的响应。</p>\n<h2 id="4-%E5%A6%82%E4%BD%95%E5%90%91-url-%E4%B8%8A%E6%B7%BB%E5%8A%A0%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4">4. 如何向 URL 上添加过期时间<a class="anchor" href="#4-%E5%A6%82%E4%BD%95%E5%90%91-url-%E4%B8%8A%E6%B7%BB%E5%8A%A0%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4">§</a></h2>\n<p>为了使我们的 URL 在某个时间点上过期，我们将使用流行的 Moment.js 库，该库使处理日期变得更容器。</p>\n<p>幸运的是，它已经被<a href="https://deno.land/x/moment">良好移植到了 Deno 上</a>。要了解其工作原理，请在上一句的链接中查看其文档。</p>\n<p>要在代码中使用到，请直接通过 URL 导入：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Application</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Router</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"&lt;<a class="token url-link" href="https://deno.land/x/oak/mod.ts">https://deno.land/x/oak/mod.ts</a>>"</span><span class="token punctuation">;</span>\n<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> moment <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"&lt;<a class="token url-link" href="https://deno.land/x/moment/moment.ts">https://deno.land/x/moment/moment.ts</a>>"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<p>为了检查 URL 什么时候过期，我们检查 urls 对象上的 expiryDate 键值。如下所示：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token property-access">params</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span> <span class="token operator">&amp;&amp;</span> urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>\n    urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">expiryDate</span> <span class="token operator">></span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">format</span><span class="token punctuation">(</span><span class="token string">"YYYY-MM-DD"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>context<span class="token punctuation">.</span><span class="token property-access">params</span><span class="token punctuation">.</span><span class="token property-access">urlid</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">dest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n    context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"Link Expired"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>\n  context<span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token property-access">body</span> <span class="token operator">=</span> <span class="token string">"404"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>在 <code>moment().format(&quot;YYYY-MM-DD&quot;)</code> 中，我们使用 moment() 来获取当前的时间。然后使用 <code>.format(&quot;YYYY-MM-DD&quot;)</code> 将其格式化为 &quot;YYYY-MM-DD&quot;（年-月-日）格式。</p>\n<p>通过将其与我们的 <strong>expiryDate</strong> 键进行比较，我们可以检查当前的 URL 是否已过期。</p>\n<p>就是这样！你已经在 Deno 中构建了功能齐全的 URL 短链器。你可以<a href="https://github.com/akash-joshi/deno-url-shortener">在这个 Github 库</a>中找打最终的代码。</p>\n<p>通过将 <code>expiryDate</code> 设置为当前日期并对 <code>urls.json</code> 和我们的代码进行其它更改可以测试更多功能。</p>\n<h2 id="%E6%88%91%E5%AF%B9-deno-%E7%9A%84%E7%9C%8B%E6%B3%95">我对 Deno 的看法<a class="anchor" href="#%E6%88%91%E5%AF%B9-deno-%E7%9A%84%E7%9C%8B%E6%B3%95">§</a></h2>\n<p>为了总结这篇文章，我将谈谈我对 deno.land 的思考。</p>\n<p>当看到一种考虑安全性并支持 TypeScript 的服务端运行时令人耳目一新，但 Deno 在应用到生产环境之前还有很长的路要走。</p>\n<p>例如，即使对于像我们刚开发的那样简单的程序，使用 TypeScript 编译也得需要约为 20 秒的时间，这非常的慢。</p>\n<p>在错误报告方面，描述错误的地方还很糟糕。比如，当在函数本身中嵌入代码以读取 <code>urls.json</code> 时，Deno 无法报告未设置 <code>-allow-read</code> 标志。相反，它只会引发内部错误，而不会在终端上打印正确的错误。</p>\n<blockquote>\n<p>译者注：现 Deno 1.9 版本已经很好地支持权限提示了，其它的也在逐步支持中。</p>\n</blockquote>\n<h2 id="%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AF%E4%BB%80%E4%B9%88">接下来是什么？<a class="anchor" href="#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AF%E4%BB%80%E4%B9%88">§</a></h2>\n<p>你可以通过构建更复杂的应用程序（比如<a href="https://css-tricks.com/build-a-chat-app-using-react-hooks-in-100-lines-of-code/">聊天应用程序</a>或 <a href="https://auth0.com/blog/building-a-wikipedia-app-using-react-hooks-and-auth0/">Wikipedia 克隆版</a>）来提高你的 Deno 或 TypeScript 的技能。</p>\n<p>你也可以浏览 deno.land 上的 Deno 文档，来更熟悉基础知识。</p>\n<p>感谢你阅读本文，祝你编程愉快！</p>\n<h2 id="%E9%87%8D%E8%A6%81%E9%93%BE%E6%8E%A5">重要链接<a class="anchor" href="#%E9%87%8D%E8%A6%81%E9%93%BE%E6%8E%A5">§</a></h2>\n<p>Deno - <a href="https://deno.land/">https://deno.land</a>\nDeno X (仓库中心) - <a href="https://deno.land/x/">https://deno.land/x/</a>\nOak (REST 框架) -  <a href="https://deno.land/x/oak">https://deno.land/x/oak</a>\nOak 基础用法 -  <a href="https://deno.land/x/oak@v6.3.1#basic-usage">https://deno.land/x/oak@v6.3.1#basic-usage</a>\n最终的 GitHub 仓库 -  <a href="https://github.com/akash-joshi/deno-url-shortener">https://github.com/akash-joshi/deno-url-shortener</a></p>\n<blockquote>\n<p>© <a href="https://github.com/hylerrix/deno-tutorial">https://github.com/hylerrix/deno-tutorial</a> 2020~2021</p>\n</blockquote>'
        } }),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#0-%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87">0. 前置准备</a></li><li><a href="#1-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%B7%AF%E7%94%B1">1. 如何构建路由</a></li><li><a href="#2-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA-url-%E7%9F%AD%E9%93%BE%E5%99%A8">2. 如何构建 URL 短链器</a></li><li><a href="#3-%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%AE%9E%E6%97%B6%E8%AF%BB%E5%8F%96">3. 如何添加实时读取</a></li><li><a href="#4-%E5%A6%82%E4%BD%95%E5%90%91-url-%E4%B8%8A%E6%B7%BB%E5%8A%A0%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4">4. 如何向 URL 上添加过期时间</a></li><li><a href="#%E6%88%91%E5%AF%B9-deno-%E7%9A%84%E7%9C%8B%E6%B3%95">我对 Deno 的看法</a></li><li><a href="#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%98%AF%E4%BB%80%E4%B9%88">接下来是什么？</a></li><li><a href="#%E9%87%8D%E8%A6%81%E9%93%BE%E6%8E%A5">重要链接</a></li></ol></nav>'
        } }),
    'author': "hylerrix",
    'contributors': [
        "hylerrix"
    ],
    'date': "2021-03-23T03:11:47.000Z",
    'updated': null,
    'excerpt': "在本文中，我们将要学习 Deno 的基础，比如如何运行一个程序并且拥抱 Deno 的安全特性。 Deno 是用 Rust 编写的一个全新 JavaScript 和 TypeScript 运行时。它提供了严格的安全性、开箱即用的 TypeScript、一个单个可运行的执行...",
    'cover': "https://cdn.nlark.com/yuque/0/2021/png/86548/1619653066161-316f1fd4-408a-41db-89bb-5ed381463e71.png#height=853&id=YbFIR&margin=%5Bobject%20Object%5D&name=image.png&originHeight=853&originWidth=1280&originalType=binary&size=2873338&status=done&style=none&width=1280",
    'sidebar': [
        {
            "text": "Deno 钻研之术",
            "link": "articles/index.html",
            "pagePath": "articles/README.md"
        },
        {
            "link": "articles/document/index.html",
            "title": "文档篇",
            "children": [
                {
                    "text": "Deno 版本历史概览",
                    "link": "articles/document/deno-version-handbook.html",
                    "pagePath": "articles/document/deno-version-handbook.md"
                },
                {
                    "text": "Deno CLI 通用手册",
                    "link": "articles/document/deno-cli-handbook.html",
                    "pagePath": "articles/document/deno-cli-handbook.md"
                },
                {
                    "text": "Deno 专业术语翻译手册",
                    "link": "articles/document/deno-translation-dictionary.html",
                    "pagePath": "articles/document/deno-translation-dictionary.md"
                }
            ],
            "pagePath": "articles/document/README.md",
            "text": "文档篇"
        },
        {
            "link": "articles/basic/index.html",
            "title": "基础篇",
            "children": [
                {
                    "text": "Hello，从多样化安装到简单实战",
                    "link": "articles/basic/install-and-hello-world.html",
                    "pagePath": "articles/basic/install-and-hello-world.md"
                }
            ],
            "pagePath": "articles/basic/README.md",
            "text": "基础篇"
        },
        {
            "link": "articles/architecture/index.html",
            "title": "架构篇",
            "children": [
                {
                    "link": "articles/architecture/cli/index.html",
                    "title": "探索 CLI",
                    "children": [
                        {
                            "text": "从 CLI 指令通读 Deno v1.x 全特性",
                            "link": "articles/architecture/cli/deno-cli-v1-function.html",
                            "pagePath": "articles/architecture/cli/deno-cli-v1-function.md"
                        }
                    ],
                    "pagePath": "articles/architecture/cli/README.md",
                    "text": "CLI 篇"
                }
            ],
            "pagePath": "articles/architecture/README.md",
            "text": "架构篇"
        },
        {
            "link": "articles/ecology/index.html",
            "title": "生态篇",
            "children": [
                {
                    "text": "Awesome Deno 中文资源全图谱",
                    "link": "articles/ecology/awesome-deno-cn.html",
                    "pagePath": "articles/ecology/awesome-deno-cn.md"
                }
            ],
            "pagePath": "articles/ecology/README.md",
            "text": "生态篇"
        },
        {
            "link": "articles/official/index.html",
            "title": "官方篇",
            "children": [
                {
                    "text": "精读《Deno 2020 官方回顾及 2021 展望》",
                    "link": "articles/official/thoroughgoing-deno-in-2020.html",
                    "pagePath": "articles/official/thoroughgoing-deno-in-2020.md"
                },
                {
                    "text": "精读《Deno v1.8 发布说明》",
                    "link": "articles/official/thoroughgoing-deno-1-8.html",
                    "pagePath": "articles/official/thoroughgoing-deno-1-8.md"
                },
                {
                    "text": "译《Deno v1.9 发布说明》",
                    "link": "articles/official/translate-deno-1-9.html",
                    "pagePath": "articles/official/translate-deno-1-9.md"
                }
            ],
            "pagePath": "articles/official/README.md",
            "text": "官方篇"
        },
        {
            "link": "articles/translation/index.html",
            "title": "翻译篇",
            "children": [
                {
                    "text": "Deno 入门手册：附大量 TypeScript 代码实例",
                    "link": "articles/translation/the-deno-handbook.html",
                    "pagePath": "articles/translation/the-deno-handbook.md"
                },
                {
                    "text": "Deno + WebSockets 打造聊天室应用",
                    "link": "articles/translation/deno-chat-app.html",
                    "pagePath": "articles/translation/deno-chat-app.md"
                },
                {
                    "text": "从 Node 到 Deno：探索各大主流库替代方案",
                    "link": "articles/translation/from-node-to-deno.html",
                    "pagePath": "articles/translation/from-node-to-deno.md"
                },
                {
                    "text": "Deno + Oak 构建酷炫的 Todo API",
                    "link": "articles/translation/deno-oak-todo-api.html",
                    "pagePath": "articles/translation/deno-oak-todo-api.md"
                },
                {
                    "text": "Deno + Oak 连接 MySQL 实战教程",
                    "link": "articles/translation/deno-oak-mysql.html",
                    "pagePath": "articles/translation/deno-oak-mysql.md"
                },
                {
                    "text": "为什么我认为 Deno 是一个迈向错误方向的 JavaScript 运行时？",
                    "link": "articles/translation/why-deno-wrong.html",
                    "pagePath": "articles/translation/why-deno-wrong.md"
                },
                {
                    "text": "为什么 Deno 没有众望所归？超越 Node.js 还要做些什么？",
                    "link": "articles/translation/why-deno-flopped.html",
                    "pagePath": "articles/translation/why-deno-flopped.md"
                },
                {
                    "text": "如何在 Deno 中构建一个 URL 短链生成器",
                    "link": "articles/translation/deno-url-shortener.html",
                    "pagePath": "articles/translation/deno-url-shortener.md"
                },
                {
                    "text": "如何在 Deno 下使用 AlpehJS 库构建 React 应用",
                    "link": "articles/translation/deno-alpeh-react.html",
                    "pagePath": "articles/translation/deno-alpeh-react.md"
                }
            ],
            "pagePath": "articles/translation/README.md",
            "text": "翻译篇"
        },
        {
            "link": "articles/rust/index.html",
            "title": "Rust 篇",
            "children": [
                {
                    "text": "Rust 语言入门教程：从实战 To-Do App 开始",
                    "link": "articles/rust/rust-tutorial-todo-app.html",
                    "pagePath": "articles/rust/rust-tutorial-todo-app.md"
                }
            ],
            "pagePath": "articles/rust/README.md",
            "text": "Rust 篇"
        },
        {
            "text": "开发日志",
            "link": "articles/TIMELINE.html",
            "pagePath": "articles/TIMELINE.md"
        },
        {
            "text": "感谢",
            "link": "articles/THANKS.html",
            "pagePath": "articles/THANKS.md"
        }
    ],
    'gitalk': React.createElement(Gitalk, { admin: [
            'hylerrix'
        ], clientID: "60180eea2c09238f8998", clientSecret: "e9ea0ff6555185eda28eff4dfd4b755b1764abf3", id: "articles/translation/deno-url-shortener.html", owner: "hylerrix", pagerDirection: "first", repo: "deno-tutorial", title: "\u5982\u4F55\u5728 Deno \u4E2D\u6784\u5EFA\u4E00\u4E2A URL \u77ED\u94FE\u751F\u6210\u5668" })
};
